package mail

import (
	"context"
	"encoding/json"
	"log"
	"os"

	amqp "github.com/rabbitmq/amqp091-go"

	sharedmail "stormlink/shared/mail"

	"github.com/joho/godotenv"
)

type EmailJob struct {
    To    string `json:"to"`
    Token string `json:"token"`
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –æ—á–µ—Ä–µ–¥–∏ email_verification –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func Run(ctx context.Context) error {
    // –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º .env –∏–∑ server/, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    _ = godotenv.Load("server/.env")

    rabbitURL := os.Getenv("RABBITMQ_URL")
    if rabbitURL == "" {
        return Err("RABBITMQ_URL is empty")
    }

    conn, err := amqp.Dial(rabbitURL)
    if err != nil { return err }
    defer conn.Close()

    ch, err := conn.Channel()
    if err != nil { return err }
    defer ch.Close()

    q, err := ch.QueueDeclare(
        "email_verification",
        true, false, false, false, nil,
    )
    if err != nil { return err }

    msgs, err := ch.Consume(q.Name, "", false, false, false, false, nil)
    if err != nil { return err }

    log.Println("üì¨ Mail worker: waiting messages...")

    for {
        select {
        case <-ctx.Done():
            return nil
        case d, ok := <-msgs:
            if !ok { return nil }
            var job EmailJob
            if err := json.Unmarshal(d.Body, &job); err != nil {
                log.Printf("‚ùå invalid job: %v", err)
                _ = d.Nack(false, false)
                continue
            }
            if err := sharedmail.SendVerifyEmail(job.To, job.Token); err != nil {
                log.Printf("‚ùå send email failed: %v", err)
                _ = d.Nack(false, true)
                continue
            }
            _ = d.Ack(false)
        }
    }
}

type stringError string
func (e stringError) Error() string { return string(e) }
func Err(msg string) error { return stringError(msg) }


