package rabbitmq

import (
	"encoding/json"
	"errors"
	"log"
	"os"

	"github.com/joho/godotenv"
	amqp "github.com/rabbitmq/amqp091-go"
)

var rabbitURL string

func init() {
    if os.Getenv("RABBITMQ_URL") == "" {
        if err := godotenv.Load("server/.env"); err != nil {
            log.Println("üîç .env –¥–ª—è RabbitMQ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–º–æ—Ç—Ä–∏–º –≤ —Ä–µ–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        }
    }
    rabbitURL = os.Getenv("RABBITMQ_URL")
}

type EmailJob struct {
    To    string `json:"to"`
    Token string `json:"token"`
}

func PublishEmailJob(job EmailJob) error {
    if rabbitURL == "" {
        err := errors.New("–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RABBITMQ_URL –Ω–µ –∑–∞–¥–∞–Ω–∞")
        log.Printf("‚ùå RabbitMQ: %v", err)
        return err
    }
    conn, err := amqp.Dial(rabbitURL)
    if err != nil {
        log.Printf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: %v", err)
        return err
    }
    defer conn.Close()

    ch, err := conn.Channel()
    if err != nil {
        log.Printf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª: %v", err)
        return err
    }
    defer ch.Close()

    q, err := ch.QueueDeclare(
        "email_verification",
        true,
        false,
        false,
        false,
        nil,
    )
    if err != nil {
        log.Printf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å: %v", err)
        return err
    }

    body, err := json.Marshal(job)
    if err != nil {
        return err
    }

    err = ch.Publish(
        "",
        q.Name,
        false,
        false,
        amqp.Publishing{DeliveryMode: amqp.Persistent, ContentType: "application/json", Body: body},
    )
    if err != nil {
        log.Printf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
        return err
    }
    log.Printf("‚úÖ RabbitMQ: –∑–∞–¥–∞—á–∞ email job –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: %+v", job)
    return nil
}


