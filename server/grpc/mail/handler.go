package mail

import (
	"context"
	"stormlink/server/ent/emailverification"
	"stormlink/server/ent/user"
	"stormlink/server/pkg/jwt"
	"stormlink/server/pkg/mail"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"stormlink/server/grpc/mail/protobuf"
)

func (s *MailService) VerifyEmail(ctx context.Context, req *protobuf.VerifyEmailRequest) (*protobuf.VerifyEmailResponse, error) {
	token := req.GetToken()
	if token == "" {
		return nil, status.Errorf(codes.InvalidArgument, "token is required")
	}

	// üîç –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ —Ç–æ–∫–µ–Ω—É
	ev, err := s.client.EmailVerification.
		Query().
		Where(emailverification.TokenEQ(token)).
		WithUser().
		Only(ctx)
	if err != nil {
		return nil, status.Errorf(codes.NotFound, "invalid or expired token")
	}

	// ‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
	if time.Now().After(ev.ExpiresAt) {
		// –£–¥–∞–ª—è–µ–º –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω
		_ = s.client.EmailVerification.DeleteOne(ev).Exec(ctx)
		return nil, status.Errorf(codes.DeadlineExceeded, "verification token has expired")
	}

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = s.client.User.
		UpdateOne(ev.Edges.User).
		SetIsVerified(true).
		Save(ctx)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to verify user: %v", err)
	}

	// üßπ –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
	_ = s.client.EmailVerification.DeleteOne(ev).Exec(ctx)

	return &protobuf.VerifyEmailResponse{
		Message: "–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
	}, nil
}

func (s *MailService) ResendVerifyEmail(ctx context.Context, req *protobuf.ResendVerifyEmailRequest) (*protobuf.ResendVerifyEmailResponse, error) {
	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if err := req.Validate(); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "validation error: %v", err)
	}

	email := req.GetEmail()

	// üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	u, err := s.client.User.
		Query().
		Where(user.EmailEQ(email)).
		Only(ctx)
	if err != nil {
		return nil, status.Errorf(codes.NotFound, "user not found")
	}

	// ‚õî –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
	if u.IsVerified {
		return nil, status.Errorf(codes.FailedPrecondition, "user already verified")
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã
	_, err = s.client.EmailVerification.
		Delete().
		Where(emailverification.HasUserWith(user.EmailEQ(email))).
		Exec(ctx)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to clear old verification tokens: %v", err)
	}

	// üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
	token, err := jwt.GenerateToken(16)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to generate verification token: %v", err)
	}

	// üïì –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
	expiresAt := time.Now().Add(24 * time.Hour)
	_, err = s.client.EmailVerification.
		Create().
		SetToken(token).
		SetExpiresAt(expiresAt).
		SetUser(u).
		Save(ctx)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to save verification token: %v", err)
	}

	// üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
	err = mail.SendVerifyEmail(u.Email, token)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to send email: %v", err)
	}

	return &protobuf.ResendVerifyEmailResponse{
		Message: "Verification email sent successfully.",
	}, nil
}
