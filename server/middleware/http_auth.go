package middleware

import (
	"context"
	"log"
	"net/http"
	"strings"

	"stormlink/server/grpc/auth/protobuf"
	sharedauth "stormlink/shared/auth"
	httpCookies "stormlink/shared/http"
)

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// HTTPAuthMiddleware –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç Bearer access JWT –ª–æ–∫–∞–ª—å–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç userID –∏ Authorization –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
var authClient protobuf.AuthServiceClient

func InitHTTPAuthMiddleware(client protobuf.AuthServiceClient) {
    authClient = client
}

func HTTPAuthMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç HTTP (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∞–º–∏ –≤ —Ä–µ–∑–æ–ª–≤–µ—Ä–∞—Ö)
        ctx := httpCookies.WithHTTPContext(r.Context(), w, r)
        ctx = sharedauth.WithUserID(ctx, 0)

        // –ò—Å—Ç–æ—á–Ω–∏–∫ access —Ç–æ–∫–µ–Ω–∞: Authorization –∏–ª–∏ cookie auth_token
        authHeader := r.Header.Get("Authorization")
        if authHeader == "" {
            if c, err := r.Cookie("auth_token"); err == nil && c.Value != "" {
                authHeader = "Bearer " + c.Value
                if len(c.Value) > 20 {
                    log.Printf("üîç HTTPAuthMiddleware: Found auth_token cookie: %s", c.Value[:20] + "...")
                } else {
                    log.Printf("üîç HTTPAuthMiddleware: Found auth_token cookie: %s", c.Value)
                }
            } else {
                log.Printf("üîç HTTPAuthMiddleware: No auth_token cookie found: %v", err)
            }
        } else {
            if len(authHeader) > 20 {
                log.Printf("üîç HTTPAuthMiddleware: Found Authorization header: %s", authHeader[:20] + "...")
            } else {
                log.Printf("üîç HTTPAuthMiddleware: Found Authorization header: %s", authHeader)
            }
        }
        ctx = context.WithValue(ctx, "authorization", authHeader)

        if authHeader == "" {
            log.Printf("üîç HTTPAuthMiddleware: No auth header found")
            next.ServeHTTP(w, r.WithContext(ctx))
            return
        }

        if len(authHeader) > 30 {
            log.Printf("üîç HTTPAuthMiddleware: Final authHeader: %s", authHeader[:30] + "...")
        } else {
            log.Printf("üîç HTTPAuthMiddleware: Final authHeader: %s", authHeader)
        }
        
        if !strings.HasPrefix(authHeader, "Bearer ") {
            log.Printf("‚ùå HTTPAuthMiddleware: No Bearer prefix in authHeader")
            next.ServeHTTP(w, r.WithContext(ctx))
            return
        }

        token := strings.TrimPrefix(authHeader, "Bearer ")
        if len(token) > 20 {
            log.Printf("üîç HTTPAuthMiddleware: Validating token: %s", token[:20] + "...")
        } else {
            log.Printf("üîç HTTPAuthMiddleware: Validating token: %s", token)
        }
        // –≤–∞–ª–∏–¥–∞—Ü–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ —á–µ—Ä–µ–∑ auth-—Å–µ—Ä–≤–∏—Å
        resp, err := authClient.ValidateToken(ctx, &protobuf.ValidateTokenRequest{Token: token})
        if err != nil || !resp.GetValid() {
            log.Printf("‚ùå HTTPAuthMiddleware: invalid access token: %v", err)
            next.ServeHTTP(w, r.WithContext(ctx))
            return
        }
        log.Printf("‚úÖ HTTPAuthMiddleware: Token validated, userID: %d", resp.GetUserId())
        ctx = sharedauth.WithUserID(ctx, int(resp.GetUserId()))
        
        next.ServeHTTP(w, r.WithContext(ctx))
    })
}