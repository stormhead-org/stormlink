// server/middleware/http_auth.go
package middleware

import (
	"context"
	"log"
	"net/http"
	"stormlink/server/utils"
	"strings"
)

func HTTPAuthMiddleware(next http.Handler) http.Handler {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    hdr := r.Header.Get("Authorization")
    if strings.HasPrefix(hdr, "Bearer ") {
      token := strings.TrimPrefix(hdr, "Bearer ")
      log.Printf("üîë GraphQL: –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: %s", token)
      if claims, err := utils.ParseAccessToken(token); err == nil {
        ctx := context.WithValue(r.Context(), "userID", claims.UserID)
        r = r.WithContext(ctx)
        log.Printf("‚úÖ GraphQL: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω userID: %d", claims.UserID)
      } else {
        log.Printf("‚ùå GraphQL: –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: %v", err)
      }
    } else {
      log.Println("‚ùå GraphQL: –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    }
    next.ServeHTTP(w, r)
  })
}