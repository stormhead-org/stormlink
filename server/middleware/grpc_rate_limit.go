package middleware

import (
	"context"
	"log"
	"net"
	"strings"
	"sync"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/peer"
	"google.golang.org/grpc/status"

	"golang.org/x/time/rate"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è rate limiting
var (
	grpcVisitors        = make(map[string]*GRPCRateLimiter)
	grpcAuthLoginVisitors = make(map[string]*GRPCRateLimiter) // –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç–µ—Ä –¥–ª—è Login
	grpcAuthGeneralVisitors = make(map[string]*GRPCRateLimiter) // –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö auth endpoints
	grpcMu              sync.RWMutex
	grpcAuthLoginMu     sync.RWMutex
	grpcAuthGeneralMu   sync.RWMutex
)

// init –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
func init() {
	// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö gRPC –∑–∞–ø—Ä–æ—Å–æ–≤
	go func() {
		for {
			time.Sleep(time.Minute * 3)
			grpcMu.Lock()
			for ip, v := range grpcVisitors {
				if time.Since(v.lastSeen) > 3*time.Minute {
					delete(grpcVisitors, ip)
				}
			}
			grpcMu.Unlock()
		}
	}()

	// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è auth login gRPC –∑–∞–ø—Ä–æ—Å–æ–≤
	go func() {
		for {
			time.Sleep(time.Minute * 5)
			grpcAuthLoginMu.Lock()
			for ip, v := range grpcAuthLoginVisitors {
				if time.Since(v.lastSeen) > 5*time.Minute {
					delete(grpcAuthLoginVisitors, ip)
				}
			}
			grpcAuthLoginMu.Unlock()
		}
	}()

	// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –¥–ª—è auth general gRPC –∑–∞–ø—Ä–æ—Å–æ–≤
	go func() {
		for {
			time.Sleep(time.Minute * 3)
			grpcAuthGeneralMu.Lock()
			for ip, v := range grpcAuthGeneralVisitors {
				if time.Since(v.lastSeen) > 3*time.Minute {
					delete(grpcAuthGeneralVisitors, ip)
				}
			}
			grpcAuthGeneralMu.Unlock()
		}
	}()
}

// GRPCRateLimiter –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç rate limiter –¥–ª—è –∫–∞–∂–¥–æ–≥–æ IP –≤ gRPC
type GRPCRateLimiter struct {
	limiter  *rate.Limiter
	lastSeen time.Time
}

// GRPCRateLimitMiddleware –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ gRPC –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
func GRPCRateLimitMiddleware(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	ip := getGRPCClientIP(ctx)
	
	grpcMu.Lock()
	if limiter, exists := grpcVisitors[ip]; exists {
		limiter.lastSeen = time.Now()
		log.Printf("üîç gRPC Rate limiting: Existing limiter for IP %s", ip)
	} else {
		// –õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è gRPC
		grpcVisitors[ip] = &GRPCRateLimiter{
			limiter:  rate.NewLimiter(10, 20), // 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É, burst 20
			lastSeen: time.Now(),
		}
		log.Printf("üîç gRPC Rate limiting: Created new limiter for IP %s", ip)
	}
	
	if !grpcVisitors[ip].limiter.Allow() {
		grpcMu.Unlock()
		log.Printf("üö´ gRPC Rate limit exceeded for IP: %s, method: %s", ip, info.FullMethod)
		return nil, status.Errorf(codes.ResourceExhausted, "rate limit exceeded")
	}
	grpcMu.Unlock()
	
	log.Printf("üîç gRPC Rate limiting: Request allowed for IP %s", ip)
	return handler(ctx, req)
}

// getGRPCClientIP –∏–∑–≤–ª–µ–∫–∞–µ—Ç IP –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ gRPC –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
func getGRPCClientIP(ctx context.Context) string {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return "unknown"
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
	if ips := md.Get("x-forwarded-for"); len(ips) > 0 {
		return ips[0]
	}
	if ips := md.Get("x-real-ip"); len(ips) > 0 {
		return ips[0]
	}
	if ips := md.Get("cf-connecting-ip"); len(ips) > 0 {
		return ips[0]
	}
	
	// –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º peer info
	if peer, ok := peer.FromContext(ctx); ok {
		if tcpAddr, ok := peer.Addr.(*net.TCPAddr); ok {
			return tcpAddr.IP.String()
		}
	}
	
	return "unknown"
}

// GRPCAuthRateLimitMiddleware —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è auth gRPC endpoints
func GRPCAuthRateLimitMiddleware(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ auth endpoint
	if !strings.Contains(info.FullMethod, "/auth.AuthService/") {
		return handler(ctx, req)
	}

	ip := getGRPCClientIP(ctx)
	
	// –†–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ auth endpoints
	if strings.Contains(info.FullMethod, "/auth.AuthService/Login") {
		// –°—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è Login (–∑–∞—â–∏—Ç–∞ –æ—Ç brute force)
		log.Printf("üîç gRPC Auth Login Rate limiting: IP %s, method %s", ip, info.FullMethod)
		
		grpcAuthLoginMu.Lock()
		if limiter, exists := grpcAuthLoginVisitors[ip]; exists {
			limiter.lastSeen = time.Now()
			log.Printf("üîç gRPC Auth Login Rate limiting: Existing limiter for IP %s", ip)
		} else {
			// –°—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç –¥–ª—è Login: 5 –ø–æ–ø—ã—Ç–æ–∫ –≤ –º–∏–Ω—É—Ç—É, burst 5
			grpcAuthLoginVisitors[ip] = &GRPCRateLimiter{
				limiter: rate.NewLimiter(rate.Every(time.Minute/5), 5), // 5 –ø–æ–ø—ã—Ç–æ–∫ –≤ –º–∏–Ω—É—Ç—É
				lastSeen: time.Now(),
			}
			log.Printf("üîç gRPC Auth Login Rate limiting: Created new limiter for IP %s", ip)
		}
		
		if !grpcAuthLoginVisitors[ip].limiter.Allow() {
			grpcAuthLoginMu.Unlock()
			log.Printf("üö´ gRPC Auth Login Rate limit exceeded for IP: %s", ip)
			return nil, status.Errorf(codes.ResourceExhausted, "login rate limit exceeded")
		}
		grpcAuthLoginMu.Unlock()
		
		log.Printf("üîç gRPC Auth Login Rate limiting: Request allowed for IP %s", ip)
	} else {
		// –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö auth endpoints (ValidateToken, GetMe)
		log.Printf("üîç gRPC Auth General Rate limiting: IP %s, method %s", ip, info.FullMethod)
		
		grpcAuthGeneralMu.Lock()
		if limiter, exists := grpcAuthGeneralVisitors[ip]; exists {
			limiter.lastSeen = time.Now()
			log.Printf("üîç gRPC Auth General Rate limiting: Existing limiter for IP %s", ip)
		} else {
			// –ú—è–≥–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö auth endpoints: 60 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É, burst 100
			grpcAuthGeneralVisitors[ip] = &GRPCRateLimiter{
				limiter: rate.NewLimiter(60, 100), // 60 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É, burst 100
				lastSeen: time.Now(),
			}
			log.Printf("üîç gRPC Auth General Rate limiting: Created new limiter for IP %s", ip)
		}
		
		if !grpcAuthGeneralVisitors[ip].limiter.Allow() {
			grpcAuthGeneralMu.Unlock()
			log.Printf("üö´ gRPC Auth General Rate limit exceeded for IP: %s", ip)
			return nil, status.Errorf(codes.ResourceExhausted, "auth rate limit exceeded")
		}
		grpcAuthGeneralMu.Unlock()
		
		log.Printf("üîç gRPC Auth General Rate limiting: Request allowed for IP %s", ip)
	}
	
	return handler(ctx, req)
}
