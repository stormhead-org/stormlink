package middleware

import (
	"context"
	"log"
	"stormlink/server/utils"
	"strings"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
)

func GRPCAuthInterceptor(
	ctx context.Context,
	req interface{},
	info *grpc.UnaryServerInfo,
	handler grpc.UnaryHandler,
) (interface{}, error) {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º gRPC –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –ª–µ–≥—á–µ –±—ã–ª–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
	log.Println("üîé Full method:", info.FullMethod)

	// –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
	publicMethods := map[string]bool{
		"/auth.AuthService/Login":                   true,
		"/UserService/RegisterUser":                 true,
		"/auth.AuthService/VerifyEmail":             true,
		"/auth.AuthService/ResendVerificationEmail": true,
	}

	if publicMethods[info.FullMethod] {
		// –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
		log.Println("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
		return handler(ctx, req)
	}

	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, status.Errorf(codes.Unauthenticated, "missing metadata")
	}

	authHeader := md["authorization"]
	if len(authHeader) == 0 || !strings.HasPrefix(authHeader[0], "Bearer ") {
		return nil, status.Errorf(codes.Unauthenticated, "invalid token")
	}

	tokenStr := strings.TrimPrefix(authHeader[0], "Bearer ")
	claims, err := utils.ParseAccessToken(tokenStr)
	if err != nil {
		return nil, status.Errorf(codes.Unauthenticated, "invalid token")
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userID –∫–∞–∫ —Å—Ç—Ä–æ–∫—É UUID
	newCtx := context.WithValue(ctx, "userID", claims.UserID.String())
	return handler(newCtx, req)
}
