package middleware

import (
	"context"
	"log"
	"strings"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"

	"stormlink/server/utils"
)

func GRPCAuthInterceptor(
	ctx context.Context,
	req interface{},
	info *grpc.UnaryServerInfo,
	handler grpc.UnaryHandler,
) (interface{}, error) {
	log.Println("üîé Full method:", info.FullMethod)

	// –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
	publicMethods := map[string]bool{
		"/auth.AuthService/Login":                   true,
		"/UserService/RegisterUser":                 true,
		"/auth.AuthService/VerifyEmail":             true,
		"/auth.AuthService/ResendVerificationEmail": true,
	}

	if publicMethods[info.FullMethod] {
		log.Println("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
		return handler(ctx, req)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		log.Println("‚ùå [AuthInterceptor] Missing metadata")
		return nil, status.Errorf(codes.Unauthenticated, "missing metadata")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
	authHeader, ok := md["authorization"]
	if !ok || len(authHeader) == 0 {
		log.Println("‚ùå [AuthInterceptor] Missing Authorization header")
		return nil, status.Errorf(codes.Unauthenticated, "missing or invalid token")
	}
	if !strings.HasPrefix(authHeader[0], "Bearer ") {
		log.Println("‚ùå [AuthInterceptor] Invalid Authorization format:", authHeader[0])
		return nil, status.Errorf(codes.Unauthenticated, "missing or invalid token")
	}

	tokenStr := strings.TrimPrefix(authHeader[0], "Bearer ")

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	claims, err := utils.ParseAccessToken(tokenStr)
	if err != nil {
		log.Println("‚ùå [AuthInterceptor] Invalid token:", err)
		return nil, status.Errorf(codes.Unauthenticated, "invalid token: %v", err)
	}

	newCtx := context.WithValue(ctx, "userID", claims.UserID)
	return handler(newCtx, req)
}
