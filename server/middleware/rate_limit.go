package middleware

import (
	"log"
	"net/http"
	"sync"
	"time"

	"golang.org/x/time/rate"
)

// RateLimiter –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç rate limiter –¥–ª—è –∫–∞–∂–¥–æ–≥–æ IP
type RateLimiter struct {
	limiter *rate.Limiter
	lastSeen time.Time
}

// RateLimitMiddleware –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
func RateLimitMiddleware(next http.Handler) http.Handler {
	// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏–º–∏—Ç–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ IP
	visitors := make(map[string]*RateLimiter)
	var mu sync.RWMutex

	// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
	go func() {
		for {
			time.Sleep(time.Minute * 3)
			mu.Lock()
			for ip, v := range visitors {
				if time.Since(v.lastSeen) > 3*time.Minute {
					delete(visitors, ip)
				}
			}
			mu.Unlock()
		}
	}()

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ip := getClientIP(r)
		
		mu.Lock()
		if limiter, exists := visitors[ip]; exists {
			limiter.lastSeen = time.Now()
		} else {
			// –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç: 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É, burst –¥–æ 10
			visitors[ip] = &RateLimiter{
				limiter: rate.NewLimiter(rate.Every(time.Second/5), 10),
				lastSeen: time.Now(),
			}
		}
		
		if !visitors[ip].limiter.Allow() {
			mu.Unlock()
			log.Printf("üö´ Rate limit exceeded for IP: %s", ip)
			http.Error(w, "Too many requests", http.StatusTooManyRequests)
			return
		}
		mu.Unlock()
		
		next.ServeHTTP(w, r)
	})
}

// getClientIP –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞
func getClientIP(r *http.Request) string {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
	if ip := r.Header.Get("X-Forwarded-For"); ip != "" {
		return ip
	}
	if ip := r.Header.Get("X-Real-IP"); ip != "" {
		return ip
	}
	if ip := r.Header.Get("CF-Connecting-IP"); ip != "" {
		return ip
	}
	
	return r.RemoteAddr
}

// AuthRateLimitMiddleware —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è auth endpoints
func AuthRateLimitMiddleware(next http.Handler) http.Handler {
	// –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è auth endpoints
	visitors := make(map[string]*RateLimiter)
	var mu sync.RWMutex

	go func() {
		for {
			time.Sleep(time.Minute * 5)
			mu.Lock()
			for ip, v := range visitors {
				if time.Since(v.lastSeen) > 5*time.Minute {
					delete(visitors, ip)
				}
			}
			mu.Unlock()
		}
	}()

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ip := getClientIP(r)
		
		mu.Lock()
		if limiter, exists := visitors[ip]; exists {
			limiter.lastSeen = time.Now()
		} else {
			// 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è auth endpoints
			visitors[ip] = &RateLimiter{
				limiter: rate.NewLimiter(rate.Every(time.Minute/5), 10),
				lastSeen: time.Now(),
			}
		}
		
		if !visitors[ip].limiter.Allow() {
			mu.Unlock()
			http.Error(w, "Too many authentication attempts", http.StatusTooManyRequests)
			return
		}
		mu.Unlock()
		
		next.ServeHTTP(w, r)
	})
}
