type CommunityPermissions {
	communityRolesManagement: Boolean!
	communityUserBan: Boolean!
	communityUserMute: Boolean!
	communityDeletePost: Boolean!
	communityDeleteComments: Boolean!
	communityRemovePostFromPublication: Boolean!
	communityOwner: Boolean!
	hostOwner: Boolean!
	communityUserHasBanned: Boolean!
	communityUserHasMuted: Boolean!
}

extend type Post {
	viewerPermissions: CommunityPermissions!
}

extend type Query {
	media(id: ID!): Media

	community(id: ID!): Community
	communities(onlyNotBanned: Boolean = true): [Community!]!

	communityUserBan(communityId: ID!, userId: ID!): CommunityUserBan
	communityUserMute(communityId: ID!, userId: ID!): CommunityUserMute

	user(id: ID!): User
	users: [User!]!

	post(id: ID!): Post
	posts(status: PostStatus = PUBLISHED): [Post!]!

	role(id: ID!): Role
	roles(id: ID!): [Role!]!

	hostRole(id: ID!): HostRole
	hostRoles: [HostRole!]!

	hostUserBan(id: ID!): HostUserBan
	hostUsersBan: [HostUserBan!]!

	hostSidebarNavigationItems: [HostSidebarNavigationItem!]!
	hostSidebarNavigation: HostSidebarNavigation

	hostSocialNavigation: HostSocialNavigation

	host: Host
}

extend type Mutation {
	"""
	Установить firstSettings у конкретного Host (здесь фиксированного, с id=1)
	"""
	host(input: UpdateHostInput!): Host!
	post(input: UpdatePostInput!): Post!
	createPost(input: CreatePostInput!): Post!
	createCommunity(input: CreateCommunityInput!): Community!
}

input UpdateHostInput {
	title: String
	slogan: String
	contacts: String
	description: String
	logoID: ID
	bannerID: ID
	authBannerID: ID
	firstSettings: Boolean
}

input UpdatePostInput {
	id: ID!
	title: String
	slug: String
	content: JSON
	communityID: ID
	heroImageID: ID
	views: Int
	status: PostStatus
	publishedAt: Time
}

input CreatePostInput {
	title: String!
	content: JSON!
	authorID: ID!
	communityID: ID!
	heroImageID: ID
	status: PostStatus = DRAFT
	publishedAt: Time
}

input CreateCommunityInput {
	title: String!
	slug: String!
	description: String
	ownerID: ID!
}
