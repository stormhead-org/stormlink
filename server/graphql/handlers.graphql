scalar JSON
scalar Upload

# Enum для фильтрации подписчиков сообщества
enum CommunityFollowersFilter {
	ALL
	BANNED
	MUTED
	ACTIVE
}

# Статусы моделей
type UserStatus {
	followersCount: String!
	followingCount: String!
	postsCount: String!
	isHostBanned: Boolean!
	isHostMuted: Boolean!
	isFollowing: Boolean!
}

type CommunityStatus {
	followersCount: String!
	postsCount: String!
	isBanned: Boolean!
	isMuted: Boolean!
	isFollowing: Boolean!
}

type PostStatus {
	likesCount: String!
	commentsCount: String!
	bookmarksCount: String!
	isLiked: Boolean!
	hasBookmark: Boolean!
	authorCommunityOwner: Boolean!
	authorHostOwner: Boolean!
}

type CommentStatus {
	likesCount: String!
	isLiked: Boolean!
	authorCommunityOwner: Boolean!
	authorHostOwner: Boolean!
}

# Тип прав пользователей
type CommunityPermissions {
	communityRolesManagement: Boolean!
	communityUserBan: Boolean!
	communityUserMute: Boolean!
	communityDeletePost: Boolean!
	communityDeleteComments: Boolean!
	communityRemovePostFromPublication: Boolean!
	communityOwner: Boolean!
	hostOwner: Boolean!
}

type CommentEdge {
	cursor: String!
	node: Comment!
}

type CommentsConnection {
	edges: [CommentEdge!]!
	pageInfo: PageInfo!
}

# Запросы авторизации и аутентификации
type LoginUserResponse {
	accessToken: String!
	refreshToken: String!
	user: UserResponse!
}

type LogoutUserResponse {
	message: String!
}

type RegisterUserResponse {
	message: String!
}

type VerifyEmailResponse {
	message: String!
}

type ResendVerifyEmailResponse {
	message: String!
}

type RefreshTokenResponse {
	accessToken: String!
	refreshToken: String!
}

# Ответ на запрос пользователя
type UserAvatarResponse {
	id: String!
	url: String!
}

type UserInfoResponse {
	id: ID!
	key: String!
	value: String!
}

type UserHostRoleResponse {
	id: ID!
	title: String!
	color: String!
	communityRolesManagement: Boolean!
	hostUserBan: Boolean!
	hostUserMute: Boolean!
	hostCommunityDeletePost: Boolean!
	hostCommunityDeleteComments: Boolean!
	hostCommunityRemovePostFromPublication: Boolean!
}

type UserCommunityRoleResponse {
	id: ID!
	title: String!
	color: String!
	communityRolesManagement: Boolean!
	communityUserBan: Boolean!
	communityUserMute: Boolean!
	communityDeletePost: Boolean!
	communityDeleteComments: Boolean!
	communityRemovePostFromPublication: Boolean!
}

type UserResponse {
	id: ID!
	name: String!
	slug: String!
	avatar: UserAvatarResponse
	email: String!
	description: String!
	userInfo: [UserInfoResponse!]!
	hostRoles: [UserHostRoleResponse!]!
	communitiesRoles: [UserCommunityRoleResponse!]!
	isVerified: Boolean!
	createdAt: String!
	updatedAt: String!
}
#------------------------

# Расширение модели User
extend type User {
	userStatus: UserStatus!
}

# Расширение модели Community
extend type Community {
	viewerPermissions: CommunityPermissions!
	communityStatus: CommunityStatus!
}

# Расширение модели Post
extend type Post {
	postStatus: PostStatus!
}

# Расширение модели Comment
extend type Comment {
	commentStatus: CommentStatus!
}

extend type Query {
	media(id: ID!): Media

	community(id: ID!): Community
	communityBySlug(slug: String!): Community
	communities(onlyNotBanned: Boolean = true): [Community!]!

	communityUserBan(communityId: ID!, userId: ID!): CommunityUserBan
	communityUserMute(communityId: ID!, userId: ID!): CommunityUserMute

	communityModerator(communityId: ID!, userId: ID!): CommunityModerator

	communityRule(id: ID!): CommunityRule
	communityRules(communityID: ID!): [CommunityRule!]!

	getMe: UserResponse!

	user(id: ID!): User
	userBySlug(slug: String!): User
	users: [User!]!

	profileTableInfoItem(id: ID!): ProfileTableInfoItem
	profileTableInfoItems(
		id: ID!
		type: ProfileTableInfoItemType!
	): [ProfileTableInfoItem!]!

	post(id: ID!): Post
	postBySlug(slug: String!): Post
	posts(
		visibility: PostVisibility = PUBLISHED
		communityID: ID
		authorID: ID
	): [Post!]!

	# Посты в закладках текущего пользователя
	bookmarkedPosts(visibility: PostVisibility = PUBLISHED): [Post!]!

	# Лента постов от подписок пользователя
	feedPosts(visibility: PostVisibility = PUBLISHED): [Post!]!

	# Плоский список всех комментариев (для общей ленты)
	comments(hasDeleted: Boolean = false): [Comment!]!

	# Плоский список комментариев к посту (устаревший)
	commentsByPostId(id: ID!, hasDeleted: Boolean = false): [Comment!]!

	# Плоский список комментариев к посту постранично
	commentsByPostIdPage(
		id: ID!
		hasDeleted: Boolean = false
		limit: Int = 40
		offset: Int = 0
	): [Comment!]!

	# Двунаправленная пагинация по комментариям поста через курсоры
	commentsByPostConnection(
		postId: ID!
		first: Int
		after: String
		last: Int
		before: String
		hasDeleted: Boolean = false
	): CommentsConnection!

	# Окно комментариев вокруг якоря (включая сам якорь)
	commentsWindow(
		postId: ID!
		anchorId: ID!
		before: Int = 20
		after: Int = 20
		hasDeleted: Boolean = false
	): CommentsConnection!

	# Получить комментарий по ID (удобно для быстрого доступа к якорю)
	commentById(id: ID!): Comment

	# Лента всех комментариев в реальном времени (плоский список)
	commentsFeed(limit: Int = 50): [Comment!]!

	# Курсорная лента всех комментариев (двунаправленная)
	commentsFeedConnection(
		first: Int
		after: String
		last: Int
		before: String
		hasDeleted: Boolean = false
	): CommentsConnection!

	role(id: ID!): Role
	roles(id: ID!): [Role!]!

	hostRole(id: ID!): HostRole
	hostRoles: [HostRole!]!

	hostUserBan(id: ID!): HostUserBan
	hostUsersBan: [HostUserBan!]!

	hostSidebarNavigationItems: [HostSidebarNavigationItem!]!
	hostSidebarNavigation: HostSidebarNavigation

	hostSocialNavigation: HostSocialNavigation

	host: Host

	# Новые Query для ролей и банов
	communityRoles(communityID: ID!): [Role!]!
	communityRole(id: ID!): Role

	hostCommunityBans: [HostCommunityBan!]!
	hostCommunityBan(id: ID!): HostCommunityBan

	communityUserBans(communityID: ID!): [CommunityUserBan!]!
	communityUserMutes(communityID: ID!): [CommunityUserMute!]!

	# Пользователи для добавления в роли
	usersForRole(roleID: ID!, search: String): [User!]!
	communityUsers(communityID: ID!): [User!]!

	# Подписчики сообщества с фильтрацией
	communityFollowers(
		communityID: ID!
		filter: CommunityFollowersFilter = ALL
		limit: Int = 50
		offset: Int = 0
	): [User!]!
}

extend type Mutation {
	host(input: UpdateHostInput!): Host!
	post(input: UpdatePostInput!): Post!
	createPost(input: CreatePostInput!): Post!
	createCommunity(input: CreateCommunityInput!): Community!
	createComment(input: CreateCommentInput!): Comment!
	updateComment(input: UpdateCommentInput!): Comment!

	loginUser(input: LoginUserInput!): LoginUserResponse!
	logoutUser: LogoutUserResponse!
	registerUser(input: RegisterUserInput!): RegisterUserResponse!
	userVerifyEmail(input: VerifyEmailInput!): VerifyEmailResponse!
	resendUserVerifyEmail(
		input: ResendVerifyEmailInput!
	): ResendVerifyEmailResponse!
	userRefreshToken: RefreshTokenResponse!

	uploadMedia(file: Upload!, dir: String): Media!

	followUser(input: FollowUserInput!): UserStatus!
	unfollowUser(input: UnfollowUserInput!): UserStatus!

	followCommunity(input: FollowCommunityInput!): CommunityStatus!
	unfollowCommunity(input: UnfollowCommunityInput!): CommunityStatus!

	likePost(input: LikePostInput!): PostStatus!
	unlikePost(input: UnlikePostInput!): PostStatus!

	likeComment(input: LikeCommentInput!): CommentStatus!
	unlikeComment(input: UnlikeCommentInput!): CommentStatus!

	addBookmarkPost(input: BookmarkPostInput!): PostStatus!
	deleteBookmarkPost(input: DeleteBookmarkPostInput!): PostStatus!

	# Атомарное увеличение счётчика просмотров
	incrementPostViews(postID: ID!): Post!

	# Новые мутации настроек
	community(input: UpdateCommunityInput!): Community!
	updateUser(input: UpdateUserInput!): UserResponse!
	updateHostSocialNavigation(
		input: UpdateHostSocialNavigationInput!
	): HostSocialNavigation!

	# Мутации для управления ролями хоста
	createHostRole(input: CreateHostRoleInput!): HostRole!
	updateHostRole(input: UpdateHostRoleInput!): HostRole!
	deleteHostRole(id: ID!): Boolean!

	# Мутации для управления ролями сообщества
	createCommunityRole(input: CreateCommunityRoleInput!): Role!
	updateCommunityRole(input: UpdateCommunityRoleInput!): Role!
	deleteCommunityRole(id: ID!): Boolean!

	# Мутации для банов хоста
	banUserFromHost(input: BanUserInput!): HostUserBan!
	unbanUserFromHost(banID: ID!): Boolean!
	banCommunityFromHost(input: BanCommunityInput!): HostCommunityBan!
	unbanCommunityFromHost(banID: ID!): Boolean!

	# Мутации для банов/мутов сообщества
	banUserFromCommunity(input: BanUserInput!): CommunityUserBan!
	unbanUserFromCommunity(banID: ID!): Boolean!
	muteUserInCommunity(input: MuteUserInput!): CommunityUserMute!
	unmuteUserInCommunity(muteID: ID!): Boolean!

	# Мутации для ProfileTableInfoItem
	createProfileTableInfoItem(
		input: CreateProfileTableInfoItemInput!
	): ProfileTableInfoItem!
	updateProfileTableInfoItem(
		input: UpdateProfileTableInfoItemInput!
	): ProfileTableInfoItem!
	deleteProfileTableInfoItem(id: ID!): Boolean!

	# Мутации для правил сообществ
	createCommunityRule(input: CreateCommunityRuleInput!): CommunityRule!
	updateCommunityRule(input: UpdateCommunityRuleInput!): CommunityRule!
	deleteCommunityRule(id: ID!): Boolean!
}

extend type Subscription {
	commentAdded(postId: ID!): Comment!
	commentUpdated(postId: ID!): Comment!

	# Глобальная подписка для общей ленты комментариев (только к опубликованным постам)
	commentAddedGlobal: Comment!
	# Глобальная подписка на обновления комментариев для общей ленты
	commentUpdatedGlobal: Comment!
}

# Входные типы обновления настроек платформы
input UpdateHostInput {
	title: String
	slogan: String
	contacts: String
	description: String
	logoID: ID
	bannerID: ID
	authBannerID: ID
	firstSettings: Boolean
}

# Новые входные типы настроек
input UpdateCommunityInput {
	id: ID!
	title: String
	slug: String
	description: String
	contacts: String
	logoID: ID
	bannerID: ID
}

input CreateProfileTableInfoItemInput {
	key: String!
	value: String!
	type: ProfileTableInfoItemType!
	communityID: ID
	userID: ID
}

input UpdateProfileTableInfoItemInput {
	id: ID!
	key: String
	value: String
}

input UserInfoPatchInput {
	key: String!
	value: String!
}

input UpdateUserInput {
	id: ID!
	name: String
	slug: String
	description: String
	avatarID: ID
	info: [UserInfoPatchInput!]
}

input UpdateHostSocialNavigationInput {
	github: String
	site: String
	telegram: String
	instagram: String
	twitter: String
	mastodon: String
}

# Входные типы подписки на юзера
input FollowUserInput {
	userID: ID!
}

# Входные типы отписки от юзера
input UnfollowUserInput {
	userID: ID!
}

# Входные типы подписки на сообщества
input FollowCommunityInput {
	communityID: ID!
}

# Входные типы отписки от сообщества
input UnfollowCommunityInput {
	communityID: ID!
}

# Входные типы лайка поста
input LikePostInput {
	postID: ID!
}

# Входные типы снятия лайка с поста
input UnlikePostInput {
	postID: ID!
}

# Входные типы закладки поста
input BookmarkPostInput {
	postID: ID!
}

# Входные типы снятия закладки с поста
input DeleteBookmarkPostInput {
	postID: ID!
}

# Входные типы лайка комментария
input LikeCommentInput {
	commentID: ID!
}

# Входные типы снятия лайка с комментария
input UnlikeCommentInput {
	commentID: ID!
}

# Входные типы обновления поста
input UpdatePostInput {
	id: ID!
	title: String
	slug: String
	content: JSON
	communityID: ID
	heroImageID: ID
	visibility: PostVisibility
	publishedAt: Time
}

# Входные типы создания нового поста
input CreatePostInput {
	title: String!
	content: JSON!
	authorID: ID!
	communityID: ID!
	heroImageID: ID
	visibility: PostVisibility = DRAFT
	publishedAt: Time
}

# Входные типы создания сообщества
input CreateCommunityInput {
	title: String!
	slug: String!
	description: String
	ownerID: ID!
}

# Входные типы создания нового комментария
input CreateCommentInput {
	authorID: ID!
	communityID: ID!
	postID: ID!
	content: String!
	mediaID: ID
	parentCommentID: ID
}

# Входные типы обновления комментария
input UpdateCommentInput {
	id: ID!
	content: String
	mediaID: ID
	hasDeleted: Boolean
}

# Входные типы авторизации и аутентификации
input LoginUserInput {
	email: String!
	password: String!
}

input RegisterUserInput {
	name: String!
	email: String!
	password: String!
}

input VerifyEmailInput {
	token: String!
}

input ResendVerifyEmailInput {
	email: String!
}

# Расширения типов ролей и банов (дополняют ent.graphql)

# Входные типы для ролей
input CreateHostRoleInput {
	title: String!
	color: String
	badgeID: ID
	communityRolesManagement: Boolean
	hostUserBan: Boolean
	hostUserMute: Boolean
	hostCommunityDeletePost: Boolean
	hostCommunityRemovePostFromPublication: Boolean
	hostCommunityDeleteComments: Boolean
	userIDs: [ID!]
}

input UpdateHostRoleInput {
	id: ID!
	title: String
	color: String
	badgeID: ID
	communityRolesManagement: Boolean
	hostUserBan: Boolean
	hostUserMute: Boolean
	hostCommunityDeletePost: Boolean
	hostCommunityRemovePostFromPublication: Boolean
	hostCommunityDeleteComments: Boolean
	userIDs: [ID!]
}

input CreateCommunityRoleInput {
	title: String!
	color: String
	badgeID: ID
	communityID: ID!
	communityRolesManagement: Boolean
	communityUserBan: Boolean
	communityUserMute: Boolean
	communityDeletePost: Boolean
	communityDeleteComments: Boolean
	communityRemovePostFromPublication: Boolean
	userIDs: [ID!]
}

input UpdateCommunityRoleInput {
	id: ID!
	title: String
	color: String
	badgeID: ID
	communityRolesManagement: Boolean
	communityUserBan: Boolean
	communityUserMute: Boolean
	communityDeletePost: Boolean
	communityDeleteComments: Boolean
	communityRemovePostFromPublication: Boolean
	userIDs: [ID!]
}

# Входные типы для банов/мутов
input BanUserInput {
	userID: ID!
	communityID: ID
}

input BanCommunityInput {
	communityID: ID!
}

input MuteUserInput {
	userID: ID!
	communityID: ID!
}

# Входные типы для правил сообществ
input CreateCommunityRuleInput {
	communityID: ID!
	title: String!
	description: String!
}

input UpdateCommunityRuleInput {
	id: ID!
	title: String
	description: String
}
