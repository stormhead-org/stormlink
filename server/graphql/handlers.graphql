scalar JSON
scalar Upload

# Тип прав пользователей
type CommunityPermissions {
	communityRolesManagement: Boolean!
	communityUserBan: Boolean!
	communityUserMute: Boolean!
	communityDeletePost: Boolean!
	communityDeleteComments: Boolean!
	communityRemovePostFromPublication: Boolean!
	communityOwner: Boolean!
	hostOwner: Boolean!
}

type CommunityStatus {
	followersCount: String!
	postsCount: String!
	isBanned: Boolean!
	isMuted: Boolean!
	isFollowing: Boolean!
}

type UserStatus {
	followersCount: String!
	followingCount: String!
	postsCount: String!
	isHostBanned: Boolean!
	isHostMuted: Boolean!
	isFollowing: Boolean!
}

# Запросы авторизации и аутентификации
type LoginUserResponse {
	accessToken: String!
	refreshToken: String!
	user: UserResponse!
}

type LogoutUserResponse {
	message: String!
}

type RegisterUserResponse {
	message: String!
}

type VerifyEmailResponse {
	message: String!
}

type ResendVerifyEmailResponse {
	message: String!
}

type RefreshTokenResponse {
	accessToken: String!
	refreshToken: String!
}

# Ответ на запрос пользователя
type UserAvatarResponse {
	id: String!
	url: String!
}
type UserInfoResponse {
	id: ID!
	key: String!
	value: String!
}
type UserHostRoleResponse {
	id: ID!
	title: String!
	color: String!
	communityRolesManagement: Boolean!
	hostUserBan: Boolean!
	hostUserMute: Boolean!
	hostCommunityDeletePost: Boolean!
	hostCommunityDeleteComments: Boolean!
	hostCommunityRemovePostFromPublication: Boolean!
}
type UserCommunityRoleResponse {
	id: ID!
	title: String!
	color: String!
	communityRolesManagement: Boolean!
	communityUserBan: Boolean!
	communityUserMute: Boolean!
	communityDeletePost: Boolean!
	communityDeleteComments: Boolean!
	communityRemovePostFromPublication: Boolean!
}
type UserResponse {
	id: ID!
	name: String!
	slug: String!
	avatar: UserAvatarResponse
	email: String!
	description: String!
	userInfo: [UserInfoResponse!]!
	hostRoles: [UserHostRoleResponse!]!
	communitiesRoles: [UserCommunityRoleResponse!]!
	isVerified: Boolean!
	createdAt: String!
	updatedAt: String!
}
#------------------------

# Расширение модели Post
extend type Post {
	viewerPermissions: CommunityPermissions!
}

# Расширение модели Community
extend type Community {
	viewerPermissions: CommunityPermissions!
	communityStatus: CommunityStatus!
}

# Расширение модели User
extend type User {
	userStatus: UserStatus!
}

extend type Query {
	media(id: ID!): Media

	community(id: ID!): Community
	communityBySlug(slug: String!): Community
	communities(onlyNotBanned: Boolean = true): [Community!]!

	communityUserBan(communityId: ID!, userId: ID!): CommunityUserBan
	communityUserMute(communityId: ID!, userId: ID!): CommunityUserMute

	communityModerator(communityId: ID!, userId: ID!): CommunityModerator

	communityRule(id: ID!): CommunityRule

	getMe: UserResponse!

	user(id: ID!): User
	userBySlug(slug: String!): User
	users: [User!]!

	profileTableInfoItem(id: ID!): ProfileTableInfoItem
	profileTableInfoItems(
		id: ID!
		type: ProfileTableInfoItemType!
	): [ProfileTableInfoItem!]!

	post(id: ID!): Post
	posts(status: PostStatus = PUBLISHED, communityID: ID, authorID: ID): [Post!]!

	role(id: ID!): Role
	roles(id: ID!): [Role!]!

	hostRole(id: ID!): HostRole
	hostRoles: [HostRole!]!

	hostUserBan(id: ID!): HostUserBan
	hostUsersBan: [HostUserBan!]!

	hostSidebarNavigationItems: [HostSidebarNavigationItem!]!
	hostSidebarNavigation: HostSidebarNavigation

	hostSocialNavigation: HostSocialNavigation

	host: Host
}

extend type Mutation {
	host(input: UpdateHostInput!): Host!
	post(input: UpdatePostInput!): Post!
	createPost(input: CreatePostInput!): Post!
	createCommunity(input: CreateCommunityInput!): Community!

	loginUser(input: LoginUserInput!): LoginUserResponse!
	logoutUser: LogoutUserResponse!
	registerUser(input: RegisterUserInput!): RegisterUserResponse!
	userVerifyEmail(input: VerifyEmailInput!): VerifyEmailResponse!
	resendUserVerifyEmail(
		input: ResendVerifyEmailInput!
	): ResendVerifyEmailResponse!
	userRefreshToken: RefreshTokenResponse!

	uploadMedia(file: Upload!, dir: String): Media!

	followUser(input: FollowUserInput!): UserStatus!
	unfollowUser(input: UnfollowUserInput!): UserStatus!
}

# Входные типы обновления настроек платформы
input UpdateHostInput {
	title: String
	slogan: String
	contacts: String
	description: String
	logoID: ID
	bannerID: ID
	authBannerID: ID
	firstSettings: Boolean
}

# Входные типы подписки на юзера
input FollowUserInput {
	userID: ID!
}

# Входные типы отписки от юзера
input UnfollowUserInput {
	userID: ID!
}

# Входные типы обновления поста
input UpdatePostInput {
	id: ID!
	title: String
	slug: String
	content: JSON
	communityID: ID
	heroImageID: ID
	views: Int
	status: PostStatus
	publishedAt: Time
}

# Входные типы создания нового поста
input CreatePostInput {
	title: String!
	content: JSON!
	authorID: ID!
	communityID: ID!
	heroImageID: ID
	status: PostStatus = DRAFT
	publishedAt: Time
}

# Входные типы создания сообщества
input CreateCommunityInput {
	title: String!
	slug: String!
	description: String
	ownerID: ID!
}

# Входные типы авторизации и аутентификации
input LoginUserInput {
	email: String!
	password: String!
}

input RegisterUserInput {
	name: String!
	email: String!
	password: String!
}

input VerifyEmailInput {
	token: String!
}

input ResendVerifyEmailInput {
	email: String!
}
