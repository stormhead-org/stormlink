// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"bytes"
	"fmt"
	"io"
	"stormlink/server/ent"
	"stormlink/server/ent/post"
	"stormlink/server/ent/profiletableinfoitem"
	"strconv"
	"time"
)

type Bookmark struct {
	ID        string    `json:"id"`
	UserID    string    `json:"userID"`
	PostID    string    `json:"postID"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	User      *ent.User `json:"user"`
	Post      *ent.Post `json:"post"`
}

func (Bookmark) IsNode() {}

type BookmarkPostInput struct {
	PostID string `json:"postID"`
}

// BookmarkWhereInput is used for filtering Bookmark objects.
// Input was generated by ent.
type BookmarkWhereInput struct {
	Not *BookmarkWhereInput   `json:"not,omitempty"`
	And []*BookmarkWhereInput `json:"and,omitempty"`
	Or  []*BookmarkWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// user_id field predicates
	UserID      *string  `json:"userID,omitempty"`
	UserIdneq   *string  `json:"userIDNEQ,omitempty"`
	UserIDIn    []string `json:"userIDIn,omitempty"`
	UserIDNotIn []string `json:"userIDNotIn,omitempty"`
	// post_id field predicates
	PostID      *string  `json:"postID,omitempty"`
	PostIdneq   *string  `json:"postIDNEQ,omitempty"`
	PostIDIn    []string `json:"postIDIn,omitempty"`
	PostIDNotIn []string `json:"postIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
	// post edge predicates
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`
}

type CommentLike struct {
	ID        string       `json:"id"`
	UserID    string       `json:"userID"`
	CommentID string       `json:"commentID"`
	CreatedAt time.Time    `json:"createdAt"`
	UpdatedAt time.Time    `json:"updatedAt"`
	User      *ent.User    `json:"user"`
	Comment   *ent.Comment `json:"comment"`
}

func (CommentLike) IsNode() {}

// CommentLikeWhereInput is used for filtering CommentLike objects.
// Input was generated by ent.
type CommentLikeWhereInput struct {
	Not *CommentLikeWhereInput   `json:"not,omitempty"`
	And []*CommentLikeWhereInput `json:"and,omitempty"`
	Or  []*CommentLikeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// user_id field predicates
	UserID      *string  `json:"userID,omitempty"`
	UserIdneq   *string  `json:"userIDNEQ,omitempty"`
	UserIDIn    []string `json:"userIDIn,omitempty"`
	UserIDNotIn []string `json:"userIDNotIn,omitempty"`
	// comment_id field predicates
	CommentID      *string  `json:"commentID,omitempty"`
	CommentIdneq   *string  `json:"commentIDNEQ,omitempty"`
	CommentIDIn    []string `json:"commentIDIn,omitempty"`
	CommentIDNotIn []string `json:"commentIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
	// comment edge predicates
	HasComment     *bool                `json:"hasComment,omitempty"`
	HasCommentWith []*CommentWhereInput `json:"hasCommentWith,omitempty"`
}

// CommentWhereInput is used for filtering Comment objects.
// Input was generated by ent.
type CommentWhereInput struct {
	Not *CommentWhereInput   `json:"not,omitempty"`
	And []*CommentWhereInput `json:"and,omitempty"`
	Or  []*CommentWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// author_id field predicates
	AuthorID      *string  `json:"authorID,omitempty"`
	AuthorIdneq   *string  `json:"authorIDNEQ,omitempty"`
	AuthorIDIn    []string `json:"authorIDIn,omitempty"`
	AuthorIDNotIn []string `json:"authorIDNotIn,omitempty"`
	// post_id field predicates
	PostID      *string  `json:"postID,omitempty"`
	PostIdneq   *string  `json:"postIDNEQ,omitempty"`
	PostIDIn    []string `json:"postIDIn,omitempty"`
	PostIDNotIn []string `json:"postIDNotIn,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// parent_comment_id field predicates
	ParentCommentID       *string  `json:"parentCommentID,omitempty"`
	ParentCommentIdneq    *string  `json:"parentCommentIDNEQ,omitempty"`
	ParentCommentIDIn     []string `json:"parentCommentIDIn,omitempty"`
	ParentCommentIDNotIn  []string `json:"parentCommentIDNotIn,omitempty"`
	ParentCommentIDIsNil  *bool    `json:"parentCommentIDIsNil,omitempty"`
	ParentCommentIDNotNil *bool    `json:"parentCommentIDNotNil,omitempty"`
	// media_id field predicates
	MediaID       *string  `json:"mediaID,omitempty"`
	MediaIdneq    *string  `json:"mediaIDNEQ,omitempty"`
	MediaIDIn     []string `json:"mediaIDIn,omitempty"`
	MediaIDNotIn  []string `json:"mediaIDNotIn,omitempty"`
	MediaIDIsNil  *bool    `json:"mediaIDIsNil,omitempty"`
	MediaIDNotNil *bool    `json:"mediaIDNotNil,omitempty"`
	// has_deleted field predicates
	HasDeleted    *bool `json:"hasDeleted,omitempty"`
	HasDeletedNeq *bool `json:"hasDeletedNEQ,omitempty"`
	// has_updated field predicates
	HasUpdated    *bool `json:"hasUpdated,omitempty"`
	HasUpdatedNeq *bool `json:"hasUpdatedNEQ,omitempty"`
	// content field predicates
	Content             *string  `json:"content,omitempty"`
	ContentNeq          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGt           *string  `json:"contentGT,omitempty"`
	ContentGte          *string  `json:"contentGTE,omitempty"`
	ContentLt           *string  `json:"contentLT,omitempty"`
	ContentLte          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// author edge predicates
	HasAuthor     *bool             `json:"hasAuthor,omitempty"`
	HasAuthorWith []*UserWhereInput `json:"hasAuthorWith,omitempty"`
	// post edge predicates
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
	// media edge predicates
	HasMedia     *bool              `json:"hasMedia,omitempty"`
	HasMediaWith []*MediaWhereInput `json:"hasMediaWith,omitempty"`
	// parent_comment edge predicates
	HasParentComment     *bool                `json:"hasParentComment,omitempty"`
	HasParentCommentWith []*CommentWhereInput `json:"hasParentCommentWith,omitempty"`
	// children_comment edge predicates
	HasChildrenComment     *bool                `json:"hasChildrenComment,omitempty"`
	HasChildrenCommentWith []*CommentWhereInput `json:"hasChildrenCommentWith,omitempty"`
	// likes edge predicates
	HasLikes     *bool                    `json:"hasLikes,omitempty"`
	HasLikesWith []*CommentLikeWhereInput `json:"hasLikesWith,omitempty"`
}

type CommunityFollow struct {
	ID          string         `json:"id"`
	UserID      string         `json:"userID"`
	CommunityID string         `json:"communityID"`
	CreatedAt   time.Time      `json:"createdAt"`
	UpdatedAt   time.Time      `json:"updatedAt"`
	User        *ent.User      `json:"user"`
	Community   *ent.Community `json:"community"`
}

func (CommunityFollow) IsNode() {}

// CommunityFollowWhereInput is used for filtering CommunityFollow objects.
// Input was generated by ent.
type CommunityFollowWhereInput struct {
	Not *CommunityFollowWhereInput   `json:"not,omitempty"`
	And []*CommunityFollowWhereInput `json:"and,omitempty"`
	Or  []*CommunityFollowWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// user_id field predicates
	UserID      *string  `json:"userID,omitempty"`
	UserIdneq   *string  `json:"userIDNEQ,omitempty"`
	UserIDIn    []string `json:"userIDIn,omitempty"`
	UserIDNotIn []string `json:"userIDNotIn,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
}

// CommunityModeratorWhereInput is used for filtering CommunityModerator objects.
// Input was generated by ent.
type CommunityModeratorWhereInput struct {
	Not *CommunityModeratorWhereInput   `json:"not,omitempty"`
	And []*CommunityModeratorWhereInput `json:"and,omitempty"`
	Or  []*CommunityModeratorWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// user_id field predicates
	UserID      *string  `json:"userID,omitempty"`
	UserIdneq   *string  `json:"userIDNEQ,omitempty"`
	UserIDIn    []string `json:"userIDIn,omitempty"`
	UserIDNotIn []string `json:"userIDNotIn,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
}

// CommunityRuleWhereInput is used for filtering CommunityRule objects.
// Input was generated by ent.
type CommunityRuleWhereInput struct {
	Not *CommunityRuleWhereInput   `json:"not,omitempty"`
	And []*CommunityRuleWhereInput `json:"and,omitempty"`
	Or  []*CommunityRuleWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// rule_id field predicates
	RuleID       *string  `json:"ruleID,omitempty"`
	RuleIdneq    *string  `json:"ruleIDNEQ,omitempty"`
	RuleIDIn     []string `json:"ruleIDIn,omitempty"`
	RuleIDNotIn  []string `json:"ruleIDNotIn,omitempty"`
	RuleIDIsNil  *bool    `json:"ruleIDIsNil,omitempty"`
	RuleIDNotNil *bool    `json:"ruleIDNotNil,omitempty"`
	// community_name_rule field predicates
	CommunityNameRule             *string  `json:"communityNameRule,omitempty"`
	CommunityNameRuleNeq          *string  `json:"communityNameRuleNEQ,omitempty"`
	CommunityNameRuleIn           []string `json:"communityNameRuleIn,omitempty"`
	CommunityNameRuleNotIn        []string `json:"communityNameRuleNotIn,omitempty"`
	CommunityNameRuleGt           *string  `json:"communityNameRuleGT,omitempty"`
	CommunityNameRuleGte          *string  `json:"communityNameRuleGTE,omitempty"`
	CommunityNameRuleLt           *string  `json:"communityNameRuleLT,omitempty"`
	CommunityNameRuleLte          *string  `json:"communityNameRuleLTE,omitempty"`
	CommunityNameRuleContains     *string  `json:"communityNameRuleContains,omitempty"`
	CommunityNameRuleHasPrefix    *string  `json:"communityNameRuleHasPrefix,omitempty"`
	CommunityNameRuleHasSuffix    *string  `json:"communityNameRuleHasSuffix,omitempty"`
	CommunityNameRuleIsNil        *bool    `json:"communityNameRuleIsNil,omitempty"`
	CommunityNameRuleNotNil       *bool    `json:"communityNameRuleNotNil,omitempty"`
	CommunityNameRuleEqualFold    *string  `json:"communityNameRuleEqualFold,omitempty"`
	CommunityNameRuleContainsFold *string  `json:"communityNameRuleContainsFold,omitempty"`
	// community_description_rule field predicates
	CommunityDescriptionRule             *string  `json:"communityDescriptionRule,omitempty"`
	CommunityDescriptionRuleNeq          *string  `json:"communityDescriptionRuleNEQ,omitempty"`
	CommunityDescriptionRuleIn           []string `json:"communityDescriptionRuleIn,omitempty"`
	CommunityDescriptionRuleNotIn        []string `json:"communityDescriptionRuleNotIn,omitempty"`
	CommunityDescriptionRuleGt           *string  `json:"communityDescriptionRuleGT,omitempty"`
	CommunityDescriptionRuleGte          *string  `json:"communityDescriptionRuleGTE,omitempty"`
	CommunityDescriptionRuleLt           *string  `json:"communityDescriptionRuleLT,omitempty"`
	CommunityDescriptionRuleLte          *string  `json:"communityDescriptionRuleLTE,omitempty"`
	CommunityDescriptionRuleContains     *string  `json:"communityDescriptionRuleContains,omitempty"`
	CommunityDescriptionRuleHasPrefix    *string  `json:"communityDescriptionRuleHasPrefix,omitempty"`
	CommunityDescriptionRuleHasSuffix    *string  `json:"communityDescriptionRuleHasSuffix,omitempty"`
	CommunityDescriptionRuleIsNil        *bool    `json:"communityDescriptionRuleIsNil,omitempty"`
	CommunityDescriptionRuleNotNil       *bool    `json:"communityDescriptionRuleNotNil,omitempty"`
	CommunityDescriptionRuleEqualFold    *string  `json:"communityDescriptionRuleEqualFold,omitempty"`
	CommunityDescriptionRuleContainsFold *string  `json:"communityDescriptionRuleContainsFold,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
}

type CommunityStatus struct {
	FollowersCount string `json:"followersCount"`
	PostsCount     string `json:"postsCount"`
	IsBanned       bool   `json:"isBanned"`
	IsMuted        bool   `json:"isMuted"`
	IsFollowing    bool   `json:"isFollowing"`
}

// CommunityUserBanWhereInput is used for filtering CommunityUserBan objects.
// Input was generated by ent.
type CommunityUserBanWhereInput struct {
	Not *CommunityUserBanWhereInput   `json:"not,omitempty"`
	And []*CommunityUserBanWhereInput `json:"and,omitempty"`
	Or  []*CommunityUserBanWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// user_id field predicates
	UserID      *string  `json:"userID,omitempty"`
	UserIdneq   *string  `json:"userIDNEQ,omitempty"`
	UserIDIn    []string `json:"userIDIn,omitempty"`
	UserIDNotIn []string `json:"userIDNotIn,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
}

// CommunityUserMuteWhereInput is used for filtering CommunityUserMute objects.
// Input was generated by ent.
type CommunityUserMuteWhereInput struct {
	Not *CommunityUserMuteWhereInput   `json:"not,omitempty"`
	And []*CommunityUserMuteWhereInput `json:"and,omitempty"`
	Or  []*CommunityUserMuteWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// user_id field predicates
	UserID      *string  `json:"userID,omitempty"`
	UserIdneq   *string  `json:"userIDNEQ,omitempty"`
	UserIDIn    []string `json:"userIDIn,omitempty"`
	UserIDNotIn []string `json:"userIDNotIn,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
}

// CommunityWhereInput is used for filtering Community objects.
// Input was generated by ent.
type CommunityWhereInput struct {
	Not *CommunityWhereInput   `json:"not,omitempty"`
	And []*CommunityWhereInput `json:"and,omitempty"`
	Or  []*CommunityWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// logo_id field predicates
	LogoID       *string  `json:"logoID,omitempty"`
	LogoIdneq    *string  `json:"logoIDNEQ,omitempty"`
	LogoIDIn     []string `json:"logoIDIn,omitempty"`
	LogoIDNotIn  []string `json:"logoIDNotIn,omitempty"`
	LogoIDIsNil  *bool    `json:"logoIDIsNil,omitempty"`
	LogoIDNotNil *bool    `json:"logoIDNotNil,omitempty"`
	// banner_id field predicates
	BannerID       *string  `json:"bannerID,omitempty"`
	BannerIdneq    *string  `json:"bannerIDNEQ,omitempty"`
	BannerIDIn     []string `json:"bannerIDIn,omitempty"`
	BannerIDNotIn  []string `json:"bannerIDNotIn,omitempty"`
	BannerIDIsNil  *bool    `json:"bannerIDIsNil,omitempty"`
	BannerIDNotNil *bool    `json:"bannerIDNotNil,omitempty"`
	// owner_id field predicates
	OwnerID      *string  `json:"ownerID,omitempty"`
	OwnerIdneq   *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn    []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn []string `json:"ownerIDNotIn,omitempty"`
	// title field predicates
	Title             *string  `json:"title,omitempty"`
	TitleNeq          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGt           *string  `json:"titleGT,omitempty"`
	TitleGte          *string  `json:"titleGTE,omitempty"`
	TitleLt           *string  `json:"titleLT,omitempty"`
	TitleLte          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`
	// slug field predicates
	Slug             *string  `json:"slug,omitempty"`
	SlugNeq          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGt           *string  `json:"slugGT,omitempty"`
	SlugGte          *string  `json:"slugGTE,omitempty"`
	SlugLt           *string  `json:"slugLT,omitempty"`
	SlugLte          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`
	// contacts field predicates
	Contacts             *string  `json:"contacts,omitempty"`
	ContactsNeq          *string  `json:"contactsNEQ,omitempty"`
	ContactsIn           []string `json:"contactsIn,omitempty"`
	ContactsNotIn        []string `json:"contactsNotIn,omitempty"`
	ContactsGt           *string  `json:"contactsGT,omitempty"`
	ContactsGte          *string  `json:"contactsGTE,omitempty"`
	ContactsLt           *string  `json:"contactsLT,omitempty"`
	ContactsLte          *string  `json:"contactsLTE,omitempty"`
	ContactsContains     *string  `json:"contactsContains,omitempty"`
	ContactsHasPrefix    *string  `json:"contactsHasPrefix,omitempty"`
	ContactsHasSuffix    *string  `json:"contactsHasSuffix,omitempty"`
	ContactsIsNil        *bool    `json:"contactsIsNil,omitempty"`
	ContactsNotNil       *bool    `json:"contactsNotNil,omitempty"`
	ContactsEqualFold    *string  `json:"contactsEqualFold,omitempty"`
	ContactsContainsFold *string  `json:"contactsContainsFold,omitempty"`
	// description field predicates
	Description             *string  `json:"description,omitempty"`
	DescriptionNeq          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGt           *string  `json:"descriptionGT,omitempty"`
	DescriptionGte          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLt           *string  `json:"descriptionLT,omitempty"`
	DescriptionLte          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        *bool    `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       *bool    `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`
	// community_has_banned field predicates
	CommunityHasBanned    *bool `json:"communityHasBanned,omitempty"`
	CommunityHasBannedNeq *bool `json:"communityHasBannedNEQ,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// logo edge predicates
	HasLogo     *bool              `json:"hasLogo,omitempty"`
	HasLogoWith []*MediaWhereInput `json:"hasLogoWith,omitempty"`
	// banner edge predicates
	HasBanner     *bool              `json:"hasBanner,omitempty"`
	HasBannerWith []*MediaWhereInput `json:"hasBannerWith,omitempty"`
	// owner edge predicates
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`
	// community_info edge predicates
	HasCommunityInfo     *bool                             `json:"hasCommunityInfo,omitempty"`
	HasCommunityInfoWith []*ProfileTableInfoItemWhereInput `json:"hasCommunityInfoWith,omitempty"`
	// moderators edge predicates
	HasModerators     *bool                           `json:"hasModerators,omitempty"`
	HasModeratorsWith []*CommunityModeratorWhereInput `json:"hasModeratorsWith,omitempty"`
	// roles edge predicates
	HasRoles     *bool             `json:"hasRoles,omitempty"`
	HasRolesWith []*RoleWhereInput `json:"hasRolesWith,omitempty"`
	// rules edge predicates
	HasRules     *bool                      `json:"hasRules,omitempty"`
	HasRulesWith []*CommunityRuleWhereInput `json:"hasRulesWith,omitempty"`
	// followers edge predicates
	HasFollowers     *bool                        `json:"hasFollowers,omitempty"`
	HasFollowersWith []*CommunityFollowWhereInput `json:"hasFollowersWith,omitempty"`
	// bans edge predicates
	HasBans     *bool                         `json:"hasBans,omitempty"`
	HasBansWith []*CommunityUserBanWhereInput `json:"hasBansWith,omitempty"`
	// mutes edge predicates
	HasMutes     *bool                          `json:"hasMutes,omitempty"`
	HasMutesWith []*CommunityUserMuteWhereInput `json:"hasMutesWith,omitempty"`
	// posts edge predicates
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`
	// comments edge predicates
	HasComments     *bool                `json:"hasComments,omitempty"`
	HasCommentsWith []*CommentWhereInput `json:"hasCommentsWith,omitempty"`
}

type CreateCommentInput struct {
	AuthorID        string  `json:"authorID"`
	CommunityID     string  `json:"communityID"`
	PostID          string  `json:"postID"`
	Content         string  `json:"content"`
	MediaID         *string `json:"mediaID,omitempty"`
	ParentCommentID *string `json:"parentCommentID,omitempty"`
}

type CreateCommunityInput struct {
	Title       string  `json:"title"`
	Slug        string  `json:"slug"`
	Description *string `json:"description,omitempty"`
	OwnerID     string  `json:"ownerID"`
}

type CreatePostInput struct {
	Title       string           `json:"title"`
	Content     map[string]any   `json:"content"`
	AuthorID    string           `json:"authorID"`
	CommunityID string           `json:"communityID"`
	HeroImageID *string          `json:"heroImageID,omitempty"`
	Status      *post.Visibility `json:"status,omitempty"`
	PublishedAt *time.Time       `json:"publishedAt,omitempty"`
}

type DeleteBookmarkPostInput struct {
	PostID string `json:"postID"`
}

type EmailVerification struct {
	ID        string    `json:"id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expiresAt"`
	CreatedAt time.Time `json:"createdAt"`
	User      *ent.User `json:"user,omitempty"`
}

func (EmailVerification) IsNode() {}

// EmailVerificationWhereInput is used for filtering EmailVerification objects.
// Input was generated by ent.
type EmailVerificationWhereInput struct {
	Not *EmailVerificationWhereInput   `json:"not,omitempty"`
	And []*EmailVerificationWhereInput `json:"and,omitempty"`
	Or  []*EmailVerificationWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// token field predicates
	Token             *string  `json:"token,omitempty"`
	TokenNeq          *string  `json:"tokenNEQ,omitempty"`
	TokenIn           []string `json:"tokenIn,omitempty"`
	TokenNotIn        []string `json:"tokenNotIn,omitempty"`
	TokenGt           *string  `json:"tokenGT,omitempty"`
	TokenGte          *string  `json:"tokenGTE,omitempty"`
	TokenLt           *string  `json:"tokenLT,omitempty"`
	TokenLte          *string  `json:"tokenLTE,omitempty"`
	TokenContains     *string  `json:"tokenContains,omitempty"`
	TokenHasPrefix    *string  `json:"tokenHasPrefix,omitempty"`
	TokenHasSuffix    *string  `json:"tokenHasSuffix,omitempty"`
	TokenEqualFold    *string  `json:"tokenEqualFold,omitempty"`
	TokenContainsFold *string  `json:"tokenContainsFold,omitempty"`
	// expires_at field predicates
	ExpiresAt      *time.Time   `json:"expiresAt,omitempty"`
	ExpiresAtNeq   *time.Time   `json:"expiresAtNEQ,omitempty"`
	ExpiresAtIn    []*time.Time `json:"expiresAtIn,omitempty"`
	ExpiresAtNotIn []*time.Time `json:"expiresAtNotIn,omitempty"`
	ExpiresAtGt    *time.Time   `json:"expiresAtGT,omitempty"`
	ExpiresAtGte   *time.Time   `json:"expiresAtGTE,omitempty"`
	ExpiresAtLt    *time.Time   `json:"expiresAtLT,omitempty"`
	ExpiresAtLte   *time.Time   `json:"expiresAtLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

type FollowCommunityInput struct {
	CommunityID string `json:"communityID"`
}

type FollowUserInput struct {
	UserID string `json:"userID"`
}

type HostCommunityBan struct {
	ID          string         `json:"id"`
	CommunityID string         `json:"communityID"`
	CreatedAt   time.Time      `json:"createdAt"`
	UpdatedAt   time.Time      `json:"updatedAt"`
	Community   *ent.Community `json:"community"`
}

func (HostCommunityBan) IsNode() {}

// HostCommunityBanWhereInput is used for filtering HostCommunityBan objects.
// Input was generated by ent.
type HostCommunityBanWhereInput struct {
	Not *HostCommunityBanWhereInput   `json:"not,omitempty"`
	And []*HostCommunityBanWhereInput `json:"and,omitempty"`
	Or  []*HostCommunityBanWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
}

type HostCommunityMute struct {
	ID          string         `json:"id"`
	CommunityID string         `json:"communityID"`
	CreatedAt   time.Time      `json:"createdAt"`
	UpdatedAt   time.Time      `json:"updatedAt"`
	Community   *ent.Community `json:"community"`
}

func (HostCommunityMute) IsNode() {}

// HostCommunityMuteWhereInput is used for filtering HostCommunityMute objects.
// Input was generated by ent.
type HostCommunityMuteWhereInput struct {
	Not *HostCommunityMuteWhereInput   `json:"not,omitempty"`
	And []*HostCommunityMuteWhereInput `json:"and,omitempty"`
	Or  []*HostCommunityMuteWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
}

// HostRoleWhereInput is used for filtering HostRole objects.
// Input was generated by ent.
type HostRoleWhereInput struct {
	Not *HostRoleWhereInput   `json:"not,omitempty"`
	And []*HostRoleWhereInput `json:"and,omitempty"`
	Or  []*HostRoleWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// title field predicates
	Title             *string  `json:"title,omitempty"`
	TitleNeq          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGt           *string  `json:"titleGT,omitempty"`
	TitleGte          *string  `json:"titleGTE,omitempty"`
	TitleLt           *string  `json:"titleLT,omitempty"`
	TitleLte          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`
	// badge_id field predicates
	BadgeID       *string  `json:"badgeID,omitempty"`
	BadgeIdneq    *string  `json:"badgeIDNEQ,omitempty"`
	BadgeIDIn     []string `json:"badgeIDIn,omitempty"`
	BadgeIDNotIn  []string `json:"badgeIDNotIn,omitempty"`
	BadgeIDIsNil  *bool    `json:"badgeIDIsNil,omitempty"`
	BadgeIDNotNil *bool    `json:"badgeIDNotNil,omitempty"`
	// color field predicates
	Color             *string  `json:"color,omitempty"`
	ColorNeq          *string  `json:"colorNEQ,omitempty"`
	ColorIn           []string `json:"colorIn,omitempty"`
	ColorNotIn        []string `json:"colorNotIn,omitempty"`
	ColorGt           *string  `json:"colorGT,omitempty"`
	ColorGte          *string  `json:"colorGTE,omitempty"`
	ColorLt           *string  `json:"colorLT,omitempty"`
	ColorLte          *string  `json:"colorLTE,omitempty"`
	ColorContains     *string  `json:"colorContains,omitempty"`
	ColorHasPrefix    *string  `json:"colorHasPrefix,omitempty"`
	ColorHasSuffix    *string  `json:"colorHasSuffix,omitempty"`
	ColorIsNil        *bool    `json:"colorIsNil,omitempty"`
	ColorNotNil       *bool    `json:"colorNotNil,omitempty"`
	ColorEqualFold    *string  `json:"colorEqualFold,omitempty"`
	ColorContainsFold *string  `json:"colorContainsFold,omitempty"`
	// community_roles_management field predicates
	CommunityRolesManagement    *bool `json:"communityRolesManagement,omitempty"`
	CommunityRolesManagementNeq *bool `json:"communityRolesManagementNEQ,omitempty"`
	// host_user_ban field predicates
	HostUserBan    *bool `json:"hostUserBan,omitempty"`
	HostUserBanNeq *bool `json:"hostUserBanNEQ,omitempty"`
	// host_user_mute field predicates
	HostUserMute    *bool `json:"hostUserMute,omitempty"`
	HostUserMuteNeq *bool `json:"hostUserMuteNEQ,omitempty"`
	// host_community_delete_post field predicates
	HostCommunityDeletePost    *bool `json:"hostCommunityDeletePost,omitempty"`
	HostCommunityDeletePostNeq *bool `json:"hostCommunityDeletePostNEQ,omitempty"`
	// host_community_remove_post_from_publication field predicates
	HostCommunityRemovePostFromPublication    *bool `json:"hostCommunityRemovePostFromPublication,omitempty"`
	HostCommunityRemovePostFromPublicationNeq *bool `json:"hostCommunityRemovePostFromPublicationNEQ,omitempty"`
	// host_community_delete_comments field predicates
	HostCommunityDeleteComments    *bool `json:"hostCommunityDeleteComments,omitempty"`
	HostCommunityDeleteCommentsNeq *bool `json:"hostCommunityDeleteCommentsNEQ,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// badge edge predicates
	HasBadge     *bool              `json:"hasBadge,omitempty"`
	HasBadgeWith []*MediaWhereInput `json:"hasBadgeWith,omitempty"`
	// users edge predicates
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`
}

type HostRule struct {
	ID              string    `json:"id"`
	RuleID          *string   `json:"ruleID,omitempty"`
	NameRule        *string   `json:"nameRule,omitempty"`
	DescriptionRule *string   `json:"descriptionRule,omitempty"`
	CreatedAt       time.Time `json:"createdAt"`
	UpdatedAt       time.Time `json:"updatedAt"`
	Host            *ent.Host `json:"host,omitempty"`
}

func (HostRule) IsNode() {}

// HostRuleWhereInput is used for filtering HostRule objects.
// Input was generated by ent.
type HostRuleWhereInput struct {
	Not *HostRuleWhereInput   `json:"not,omitempty"`
	And []*HostRuleWhereInput `json:"and,omitempty"`
	Or  []*HostRuleWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// rule_id field predicates
	RuleID       *string  `json:"ruleID,omitempty"`
	RuleIdneq    *string  `json:"ruleIDNEQ,omitempty"`
	RuleIDIn     []string `json:"ruleIDIn,omitempty"`
	RuleIDNotIn  []string `json:"ruleIDNotIn,omitempty"`
	RuleIDIsNil  *bool    `json:"ruleIDIsNil,omitempty"`
	RuleIDNotNil *bool    `json:"ruleIDNotNil,omitempty"`
	// name_rule field predicates
	NameRule             *string  `json:"nameRule,omitempty"`
	NameRuleNeq          *string  `json:"nameRuleNEQ,omitempty"`
	NameRuleIn           []string `json:"nameRuleIn,omitempty"`
	NameRuleNotIn        []string `json:"nameRuleNotIn,omitempty"`
	NameRuleGt           *string  `json:"nameRuleGT,omitempty"`
	NameRuleGte          *string  `json:"nameRuleGTE,omitempty"`
	NameRuleLt           *string  `json:"nameRuleLT,omitempty"`
	NameRuleLte          *string  `json:"nameRuleLTE,omitempty"`
	NameRuleContains     *string  `json:"nameRuleContains,omitempty"`
	NameRuleHasPrefix    *string  `json:"nameRuleHasPrefix,omitempty"`
	NameRuleHasSuffix    *string  `json:"nameRuleHasSuffix,omitempty"`
	NameRuleIsNil        *bool    `json:"nameRuleIsNil,omitempty"`
	NameRuleNotNil       *bool    `json:"nameRuleNotNil,omitempty"`
	NameRuleEqualFold    *string  `json:"nameRuleEqualFold,omitempty"`
	NameRuleContainsFold *string  `json:"nameRuleContainsFold,omitempty"`
	// description_rule field predicates
	DescriptionRule             *string  `json:"descriptionRule,omitempty"`
	DescriptionRuleNeq          *string  `json:"descriptionRuleNEQ,omitempty"`
	DescriptionRuleIn           []string `json:"descriptionRuleIn,omitempty"`
	DescriptionRuleNotIn        []string `json:"descriptionRuleNotIn,omitempty"`
	DescriptionRuleGt           *string  `json:"descriptionRuleGT,omitempty"`
	DescriptionRuleGte          *string  `json:"descriptionRuleGTE,omitempty"`
	DescriptionRuleLt           *string  `json:"descriptionRuleLT,omitempty"`
	DescriptionRuleLte          *string  `json:"descriptionRuleLTE,omitempty"`
	DescriptionRuleContains     *string  `json:"descriptionRuleContains,omitempty"`
	DescriptionRuleHasPrefix    *string  `json:"descriptionRuleHasPrefix,omitempty"`
	DescriptionRuleHasSuffix    *string  `json:"descriptionRuleHasSuffix,omitempty"`
	DescriptionRuleIsNil        *bool    `json:"descriptionRuleIsNil,omitempty"`
	DescriptionRuleNotNil       *bool    `json:"descriptionRuleNotNil,omitempty"`
	DescriptionRuleEqualFold    *string  `json:"descriptionRuleEqualFold,omitempty"`
	DescriptionRuleContainsFold *string  `json:"descriptionRuleContainsFold,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// host edge predicates
	HasHost     *bool             `json:"hasHost,omitempty"`
	HasHostWith []*HostWhereInput `json:"hasHostWith,omitempty"`
}

// HostSidebarNavigationItemWhereInput is used for filtering HostSidebarNavigationItem objects.
// Input was generated by ent.
type HostSidebarNavigationItemWhereInput struct {
	Not *HostSidebarNavigationItemWhereInput   `json:"not,omitempty"`
	And []*HostSidebarNavigationItemWhereInput `json:"and,omitempty"`
	Or  []*HostSidebarNavigationItemWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// sidebar_navigation_id field predicates
	SidebarNavigationID      *string  `json:"sidebarNavigationID,omitempty"`
	SidebarNavigationIdneq   *string  `json:"sidebarNavigationIDNEQ,omitempty"`
	SidebarNavigationIDIn    []string `json:"sidebarNavigationIDIn,omitempty"`
	SidebarNavigationIDNotIn []string `json:"sidebarNavigationIDNotIn,omitempty"`
	// post_id field predicates
	PostID      *string  `json:"postID,omitempty"`
	PostIdneq   *string  `json:"postIDNEQ,omitempty"`
	PostIDIn    []string `json:"postIDIn,omitempty"`
	PostIDNotIn []string `json:"postIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// sidebar_navigation edge predicates
	HasSidebarNavigation     *bool                              `json:"hasSidebarNavigation,omitempty"`
	HasSidebarNavigationWith []*HostSidebarNavigationWhereInput `json:"hasSidebarNavigationWith,omitempty"`
	// post edge predicates
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`
}

// HostSidebarNavigationWhereInput is used for filtering HostSidebarNavigation objects.
// Input was generated by ent.
type HostSidebarNavigationWhereInput struct {
	Not *HostSidebarNavigationWhereInput   `json:"not,omitempty"`
	And []*HostSidebarNavigationWhereInput `json:"and,omitempty"`
	Or  []*HostSidebarNavigationWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// items edge predicates
	HasItems     *bool                                  `json:"hasItems,omitempty"`
	HasItemsWith []*HostSidebarNavigationItemWhereInput `json:"hasItemsWith,omitempty"`
}

// HostSocialNavigationWhereInput is used for filtering HostSocialNavigation objects.
// Input was generated by ent.
type HostSocialNavigationWhereInput struct {
	Not *HostSocialNavigationWhereInput   `json:"not,omitempty"`
	And []*HostSocialNavigationWhereInput `json:"and,omitempty"`
	Or  []*HostSocialNavigationWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// github field predicates
	Github             *string  `json:"github,omitempty"`
	GithubNeq          *string  `json:"githubNEQ,omitempty"`
	GithubIn           []string `json:"githubIn,omitempty"`
	GithubNotIn        []string `json:"githubNotIn,omitempty"`
	GithubGt           *string  `json:"githubGT,omitempty"`
	GithubGte          *string  `json:"githubGTE,omitempty"`
	GithubLt           *string  `json:"githubLT,omitempty"`
	GithubLte          *string  `json:"githubLTE,omitempty"`
	GithubContains     *string  `json:"githubContains,omitempty"`
	GithubHasPrefix    *string  `json:"githubHasPrefix,omitempty"`
	GithubHasSuffix    *string  `json:"githubHasSuffix,omitempty"`
	GithubIsNil        *bool    `json:"githubIsNil,omitempty"`
	GithubNotNil       *bool    `json:"githubNotNil,omitempty"`
	GithubEqualFold    *string  `json:"githubEqualFold,omitempty"`
	GithubContainsFold *string  `json:"githubContainsFold,omitempty"`
	// site field predicates
	Site             *string  `json:"site,omitempty"`
	SiteNeq          *string  `json:"siteNEQ,omitempty"`
	SiteIn           []string `json:"siteIn,omitempty"`
	SiteNotIn        []string `json:"siteNotIn,omitempty"`
	SiteGt           *string  `json:"siteGT,omitempty"`
	SiteGte          *string  `json:"siteGTE,omitempty"`
	SiteLt           *string  `json:"siteLT,omitempty"`
	SiteLte          *string  `json:"siteLTE,omitempty"`
	SiteContains     *string  `json:"siteContains,omitempty"`
	SiteHasPrefix    *string  `json:"siteHasPrefix,omitempty"`
	SiteHasSuffix    *string  `json:"siteHasSuffix,omitempty"`
	SiteIsNil        *bool    `json:"siteIsNil,omitempty"`
	SiteNotNil       *bool    `json:"siteNotNil,omitempty"`
	SiteEqualFold    *string  `json:"siteEqualFold,omitempty"`
	SiteContainsFold *string  `json:"siteContainsFold,omitempty"`
	// telegram field predicates
	Telegram             *string  `json:"telegram,omitempty"`
	TelegramNeq          *string  `json:"telegramNEQ,omitempty"`
	TelegramIn           []string `json:"telegramIn,omitempty"`
	TelegramNotIn        []string `json:"telegramNotIn,omitempty"`
	TelegramGt           *string  `json:"telegramGT,omitempty"`
	TelegramGte          *string  `json:"telegramGTE,omitempty"`
	TelegramLt           *string  `json:"telegramLT,omitempty"`
	TelegramLte          *string  `json:"telegramLTE,omitempty"`
	TelegramContains     *string  `json:"telegramContains,omitempty"`
	TelegramHasPrefix    *string  `json:"telegramHasPrefix,omitempty"`
	TelegramHasSuffix    *string  `json:"telegramHasSuffix,omitempty"`
	TelegramIsNil        *bool    `json:"telegramIsNil,omitempty"`
	TelegramNotNil       *bool    `json:"telegramNotNil,omitempty"`
	TelegramEqualFold    *string  `json:"telegramEqualFold,omitempty"`
	TelegramContainsFold *string  `json:"telegramContainsFold,omitempty"`
	// instagram field predicates
	Instagram             *string  `json:"instagram,omitempty"`
	InstagramNeq          *string  `json:"instagramNEQ,omitempty"`
	InstagramIn           []string `json:"instagramIn,omitempty"`
	InstagramNotIn        []string `json:"instagramNotIn,omitempty"`
	InstagramGt           *string  `json:"instagramGT,omitempty"`
	InstagramGte          *string  `json:"instagramGTE,omitempty"`
	InstagramLt           *string  `json:"instagramLT,omitempty"`
	InstagramLte          *string  `json:"instagramLTE,omitempty"`
	InstagramContains     *string  `json:"instagramContains,omitempty"`
	InstagramHasPrefix    *string  `json:"instagramHasPrefix,omitempty"`
	InstagramHasSuffix    *string  `json:"instagramHasSuffix,omitempty"`
	InstagramIsNil        *bool    `json:"instagramIsNil,omitempty"`
	InstagramNotNil       *bool    `json:"instagramNotNil,omitempty"`
	InstagramEqualFold    *string  `json:"instagramEqualFold,omitempty"`
	InstagramContainsFold *string  `json:"instagramContainsFold,omitempty"`
	// twitter field predicates
	Twitter             *string  `json:"twitter,omitempty"`
	TwitterNeq          *string  `json:"twitterNEQ,omitempty"`
	TwitterIn           []string `json:"twitterIn,omitempty"`
	TwitterNotIn        []string `json:"twitterNotIn,omitempty"`
	TwitterGt           *string  `json:"twitterGT,omitempty"`
	TwitterGte          *string  `json:"twitterGTE,omitempty"`
	TwitterLt           *string  `json:"twitterLT,omitempty"`
	TwitterLte          *string  `json:"twitterLTE,omitempty"`
	TwitterContains     *string  `json:"twitterContains,omitempty"`
	TwitterHasPrefix    *string  `json:"twitterHasPrefix,omitempty"`
	TwitterHasSuffix    *string  `json:"twitterHasSuffix,omitempty"`
	TwitterIsNil        *bool    `json:"twitterIsNil,omitempty"`
	TwitterNotNil       *bool    `json:"twitterNotNil,omitempty"`
	TwitterEqualFold    *string  `json:"twitterEqualFold,omitempty"`
	TwitterContainsFold *string  `json:"twitterContainsFold,omitempty"`
	// mastodon field predicates
	Mastodon             *string  `json:"mastodon,omitempty"`
	MastodonNeq          *string  `json:"mastodonNEQ,omitempty"`
	MastodonIn           []string `json:"mastodonIn,omitempty"`
	MastodonNotIn        []string `json:"mastodonNotIn,omitempty"`
	MastodonGt           *string  `json:"mastodonGT,omitempty"`
	MastodonGte          *string  `json:"mastodonGTE,omitempty"`
	MastodonLt           *string  `json:"mastodonLT,omitempty"`
	MastodonLte          *string  `json:"mastodonLTE,omitempty"`
	MastodonContains     *string  `json:"mastodonContains,omitempty"`
	MastodonHasPrefix    *string  `json:"mastodonHasPrefix,omitempty"`
	MastodonHasSuffix    *string  `json:"mastodonHasSuffix,omitempty"`
	MastodonIsNil        *bool    `json:"mastodonIsNil,omitempty"`
	MastodonNotNil       *bool    `json:"mastodonNotNil,omitempty"`
	MastodonEqualFold    *string  `json:"mastodonEqualFold,omitempty"`
	MastodonContainsFold *string  `json:"mastodonContainsFold,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
}

// HostUserBanWhereInput is used for filtering HostUserBan objects.
// Input was generated by ent.
type HostUserBanWhereInput struct {
	Not *HostUserBanWhereInput   `json:"not,omitempty"`
	And []*HostUserBanWhereInput `json:"and,omitempty"`
	Or  []*HostUserBanWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

type HostUserMute struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	User      *ent.User `json:"user"`
}

func (HostUserMute) IsNode() {}

// HostUserMuteWhereInput is used for filtering HostUserMute objects.
// Input was generated by ent.
type HostUserMuteWhereInput struct {
	Not *HostUserMuteWhereInput   `json:"not,omitempty"`
	And []*HostUserMuteWhereInput `json:"and,omitempty"`
	Or  []*HostUserMuteWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// HostWhereInput is used for filtering Host objects.
// Input was generated by ent.
type HostWhereInput struct {
	Not *HostWhereInput   `json:"not,omitempty"`
	And []*HostWhereInput `json:"and,omitempty"`
	Or  []*HostWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// title field predicates
	Title             *string  `json:"title,omitempty"`
	TitleNeq          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGt           *string  `json:"titleGT,omitempty"`
	TitleGte          *string  `json:"titleGTE,omitempty"`
	TitleLt           *string  `json:"titleLT,omitempty"`
	TitleLte          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleIsNil        *bool    `json:"titleIsNil,omitempty"`
	TitleNotNil       *bool    `json:"titleNotNil,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`
	// slogan field predicates
	Slogan             *string  `json:"slogan,omitempty"`
	SloganNeq          *string  `json:"sloganNEQ,omitempty"`
	SloganIn           []string `json:"sloganIn,omitempty"`
	SloganNotIn        []string `json:"sloganNotIn,omitempty"`
	SloganGt           *string  `json:"sloganGT,omitempty"`
	SloganGte          *string  `json:"sloganGTE,omitempty"`
	SloganLt           *string  `json:"sloganLT,omitempty"`
	SloganLte          *string  `json:"sloganLTE,omitempty"`
	SloganContains     *string  `json:"sloganContains,omitempty"`
	SloganHasPrefix    *string  `json:"sloganHasPrefix,omitempty"`
	SloganHasSuffix    *string  `json:"sloganHasSuffix,omitempty"`
	SloganIsNil        *bool    `json:"sloganIsNil,omitempty"`
	SloganNotNil       *bool    `json:"sloganNotNil,omitempty"`
	SloganEqualFold    *string  `json:"sloganEqualFold,omitempty"`
	SloganContainsFold *string  `json:"sloganContainsFold,omitempty"`
	// contacts field predicates
	Contacts             *string  `json:"contacts,omitempty"`
	ContactsNeq          *string  `json:"contactsNEQ,omitempty"`
	ContactsIn           []string `json:"contactsIn,omitempty"`
	ContactsNotIn        []string `json:"contactsNotIn,omitempty"`
	ContactsGt           *string  `json:"contactsGT,omitempty"`
	ContactsGte          *string  `json:"contactsGTE,omitempty"`
	ContactsLt           *string  `json:"contactsLT,omitempty"`
	ContactsLte          *string  `json:"contactsLTE,omitempty"`
	ContactsContains     *string  `json:"contactsContains,omitempty"`
	ContactsHasPrefix    *string  `json:"contactsHasPrefix,omitempty"`
	ContactsHasSuffix    *string  `json:"contactsHasSuffix,omitempty"`
	ContactsIsNil        *bool    `json:"contactsIsNil,omitempty"`
	ContactsNotNil       *bool    `json:"contactsNotNil,omitempty"`
	ContactsEqualFold    *string  `json:"contactsEqualFold,omitempty"`
	ContactsContainsFold *string  `json:"contactsContainsFold,omitempty"`
	// description field predicates
	Description             *string  `json:"description,omitempty"`
	DescriptionNeq          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGt           *string  `json:"descriptionGT,omitempty"`
	DescriptionGte          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLt           *string  `json:"descriptionLT,omitempty"`
	DescriptionLte          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        *bool    `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       *bool    `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`
	// logo_id field predicates
	LogoID       *string  `json:"logoID,omitempty"`
	LogoIdneq    *string  `json:"logoIDNEQ,omitempty"`
	LogoIDIn     []string `json:"logoIDIn,omitempty"`
	LogoIDNotIn  []string `json:"logoIDNotIn,omitempty"`
	LogoIDIsNil  *bool    `json:"logoIDIsNil,omitempty"`
	LogoIDNotNil *bool    `json:"logoIDNotNil,omitempty"`
	// banner_id field predicates
	BannerID       *string  `json:"bannerID,omitempty"`
	BannerIdneq    *string  `json:"bannerIDNEQ,omitempty"`
	BannerIDIn     []string `json:"bannerIDIn,omitempty"`
	BannerIDNotIn  []string `json:"bannerIDNotIn,omitempty"`
	BannerIDIsNil  *bool    `json:"bannerIDIsNil,omitempty"`
	BannerIDNotNil *bool    `json:"bannerIDNotNil,omitempty"`
	// auth_banner_id field predicates
	AuthBannerID       *string  `json:"authBannerID,omitempty"`
	AuthBannerIdneq    *string  `json:"authBannerIDNEQ,omitempty"`
	AuthBannerIDIn     []string `json:"authBannerIDIn,omitempty"`
	AuthBannerIDNotIn  []string `json:"authBannerIDNotIn,omitempty"`
	AuthBannerIDIsNil  *bool    `json:"authBannerIDIsNil,omitempty"`
	AuthBannerIDNotNil *bool    `json:"authBannerIDNotNil,omitempty"`
	// owner_id field predicates
	OwnerID       *string  `json:"ownerID,omitempty"`
	OwnerIdneq    *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn     []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn  []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDIsNil  *bool    `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil *bool    `json:"ownerIDNotNil,omitempty"`
	// first_settings field predicates
	FirstSettings    *bool `json:"firstSettings,omitempty"`
	FirstSettingsNeq *bool `json:"firstSettingsNEQ,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// logo edge predicates
	HasLogo     *bool              `json:"hasLogo,omitempty"`
	HasLogoWith []*MediaWhereInput `json:"hasLogoWith,omitempty"`
	// banner edge predicates
	HasBanner     *bool              `json:"hasBanner,omitempty"`
	HasBannerWith []*MediaWhereInput `json:"hasBannerWith,omitempty"`
	// auth_banner edge predicates
	HasAuthBanner     *bool              `json:"hasAuthBanner,omitempty"`
	HasAuthBannerWith []*MediaWhereInput `json:"hasAuthBannerWith,omitempty"`
	// owner edge predicates
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`
	// rules edge predicates
	HasRules     *bool                 `json:"hasRules,omitempty"`
	HasRulesWith []*HostRuleWhereInput `json:"hasRulesWith,omitempty"`
}

type LikePostInput struct {
	PostID string `json:"postID"`
}

type LoginUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginUserResponse struct {
	AccessToken  string        `json:"accessToken"`
	RefreshToken string        `json:"refreshToken"`
	User         *UserResponse `json:"user"`
}

type LogoutUserResponse struct {
	Message string `json:"message"`
}

// MediaWhereInput is used for filtering Media objects.
// Input was generated by ent.
type MediaWhereInput struct {
	Not *MediaWhereInput   `json:"not,omitempty"`
	And []*MediaWhereInput `json:"and,omitempty"`
	Or  []*MediaWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// alt field predicates
	Alt             *string  `json:"alt,omitempty"`
	AltNeq          *string  `json:"altNEQ,omitempty"`
	AltIn           []string `json:"altIn,omitempty"`
	AltNotIn        []string `json:"altNotIn,omitempty"`
	AltGt           *string  `json:"altGT,omitempty"`
	AltGte          *string  `json:"altGTE,omitempty"`
	AltLt           *string  `json:"altLT,omitempty"`
	AltLte          *string  `json:"altLTE,omitempty"`
	AltContains     *string  `json:"altContains,omitempty"`
	AltHasPrefix    *string  `json:"altHasPrefix,omitempty"`
	AltHasSuffix    *string  `json:"altHasSuffix,omitempty"`
	AltIsNil        *bool    `json:"altIsNil,omitempty"`
	AltNotNil       *bool    `json:"altNotNil,omitempty"`
	AltEqualFold    *string  `json:"altEqualFold,omitempty"`
	AltContainsFold *string  `json:"altContainsFold,omitempty"`
	// url field predicates
	URL             *string  `json:"url,omitempty"`
	URLNeq          *string  `json:"urlNEQ,omitempty"`
	URLIn           []string `json:"urlIn,omitempty"`
	URLNotIn        []string `json:"urlNotIn,omitempty"`
	URLGt           *string  `json:"urlGT,omitempty"`
	URLGte          *string  `json:"urlGTE,omitempty"`
	URLLt           *string  `json:"urlLT,omitempty"`
	URLLte          *string  `json:"urlLTE,omitempty"`
	URLContains     *string  `json:"urlContains,omitempty"`
	URLHasPrefix    *string  `json:"urlHasPrefix,omitempty"`
	URLHasSuffix    *string  `json:"urlHasSuffix,omitempty"`
	URLIsNil        *bool    `json:"urlIsNil,omitempty"`
	URLNotNil       *bool    `json:"urlNotNil,omitempty"`
	URLEqualFold    *string  `json:"urlEqualFold,omitempty"`
	URLContainsFold *string  `json:"urlContainsFold,omitempty"`
	// thumbnail_url field predicates
	ThumbnailURL             *string  `json:"thumbnailURL,omitempty"`
	ThumbnailURLNeq          *string  `json:"thumbnailURLNEQ,omitempty"`
	ThumbnailURLIn           []string `json:"thumbnailURLIn,omitempty"`
	ThumbnailURLNotIn        []string `json:"thumbnailURLNotIn,omitempty"`
	ThumbnailURLGt           *string  `json:"thumbnailURLGT,omitempty"`
	ThumbnailURLGte          *string  `json:"thumbnailURLGTE,omitempty"`
	ThumbnailURLLt           *string  `json:"thumbnailURLLT,omitempty"`
	ThumbnailURLLte          *string  `json:"thumbnailURLLTE,omitempty"`
	ThumbnailURLContains     *string  `json:"thumbnailURLContains,omitempty"`
	ThumbnailURLHasPrefix    *string  `json:"thumbnailURLHasPrefix,omitempty"`
	ThumbnailURLHasSuffix    *string  `json:"thumbnailURLHasSuffix,omitempty"`
	ThumbnailURLIsNil        *bool    `json:"thumbnailURLIsNil,omitempty"`
	ThumbnailURLNotNil       *bool    `json:"thumbnailURLNotNil,omitempty"`
	ThumbnailURLEqualFold    *string  `json:"thumbnailURLEqualFold,omitempty"`
	ThumbnailURLContainsFold *string  `json:"thumbnailURLContainsFold,omitempty"`
	// filename field predicates
	Filename             *string  `json:"filename,omitempty"`
	FilenameNeq          *string  `json:"filenameNEQ,omitempty"`
	FilenameIn           []string `json:"filenameIn,omitempty"`
	FilenameNotIn        []string `json:"filenameNotIn,omitempty"`
	FilenameGt           *string  `json:"filenameGT,omitempty"`
	FilenameGte          *string  `json:"filenameGTE,omitempty"`
	FilenameLt           *string  `json:"filenameLT,omitempty"`
	FilenameLte          *string  `json:"filenameLTE,omitempty"`
	FilenameContains     *string  `json:"filenameContains,omitempty"`
	FilenameHasPrefix    *string  `json:"filenameHasPrefix,omitempty"`
	FilenameHasSuffix    *string  `json:"filenameHasSuffix,omitempty"`
	FilenameIsNil        *bool    `json:"filenameIsNil,omitempty"`
	FilenameNotNil       *bool    `json:"filenameNotNil,omitempty"`
	FilenameEqualFold    *string  `json:"filenameEqualFold,omitempty"`
	FilenameContainsFold *string  `json:"filenameContainsFold,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
}

type Mutation struct {
}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type PostLike struct {
	ID        string    `json:"id"`
	UserID    string    `json:"userID"`
	PostID    string    `json:"postID"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	User      *ent.User `json:"user"`
	Post      *ent.Post `json:"post"`
}

func (PostLike) IsNode() {}

// PostLikeWhereInput is used for filtering PostLike objects.
// Input was generated by ent.
type PostLikeWhereInput struct {
	Not *PostLikeWhereInput   `json:"not,omitempty"`
	And []*PostLikeWhereInput `json:"and,omitempty"`
	Or  []*PostLikeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// user_id field predicates
	UserID      *string  `json:"userID,omitempty"`
	UserIdneq   *string  `json:"userIDNEQ,omitempty"`
	UserIDIn    []string `json:"userIDIn,omitempty"`
	UserIDNotIn []string `json:"userIDNotIn,omitempty"`
	// post_id field predicates
	PostID      *string  `json:"postID,omitempty"`
	PostIdneq   *string  `json:"postIDNEQ,omitempty"`
	PostIDIn    []string `json:"postIDIn,omitempty"`
	PostIDNotIn []string `json:"postIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
	// post edge predicates
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`
}

type PostStatus struct {
	LikesCount     string `json:"likesCount"`
	CommentsCount  string `json:"commentsCount"`
	BookmarksCount string `json:"bookmarksCount"`
	IsLiked        bool   `json:"isLiked"`
	HasBookmark    bool   `json:"hasBookmark"`
}

// PostWhereInput is used for filtering Post objects.
// Input was generated by ent.
type PostWhereInput struct {
	Not *PostWhereInput   `json:"not,omitempty"`
	And []*PostWhereInput `json:"and,omitempty"`
	Or  []*PostWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// title field predicates
	Title             *string  `json:"title,omitempty"`
	TitleNeq          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGt           *string  `json:"titleGT,omitempty"`
	TitleGte          *string  `json:"titleGTE,omitempty"`
	TitleLt           *string  `json:"titleLT,omitempty"`
	TitleLte          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`
	// slug field predicates
	Slug             *string  `json:"slug,omitempty"`
	SlugNeq          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGt           *string  `json:"slugGT,omitempty"`
	SlugGte          *string  `json:"slugGTE,omitempty"`
	SlugLt           *string  `json:"slugLT,omitempty"`
	SlugLte          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`
	// hero_image_id field predicates
	HeroImageID       *string  `json:"heroImageID,omitempty"`
	HeroImageIdneq    *string  `json:"heroImageIDNEQ,omitempty"`
	HeroImageIDIn     []string `json:"heroImageIDIn,omitempty"`
	HeroImageIDNotIn  []string `json:"heroImageIDNotIn,omitempty"`
	HeroImageIDIsNil  *bool    `json:"heroImageIDIsNil,omitempty"`
	HeroImageIDNotNil *bool    `json:"heroImageIDNotNil,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// author_id field predicates
	AuthorID      *string  `json:"authorID,omitempty"`
	AuthorIdneq   *string  `json:"authorIDNEQ,omitempty"`
	AuthorIDIn    []string `json:"authorIDIn,omitempty"`
	AuthorIDNotIn []string `json:"authorIDNotIn,omitempty"`
	// views field predicates
	Views      *int32  `json:"views,omitempty"`
	ViewsNeq   *int32  `json:"viewsNEQ,omitempty"`
	ViewsIn    []int32 `json:"viewsIn,omitempty"`
	ViewsNotIn []int32 `json:"viewsNotIn,omitempty"`
	ViewsGt    *int32  `json:"viewsGT,omitempty"`
	ViewsGte   *int32  `json:"viewsGTE,omitempty"`
	ViewsLt    *int32  `json:"viewsLT,omitempty"`
	ViewsLte   *int32  `json:"viewsLTE,omitempty"`
	// visibility field predicates
	Visibility      *post.Visibility  `json:"visibility,omitempty"`
	VisibilityNeq   *post.Visibility  `json:"visibilityNEQ,omitempty"`
	VisibilityIn    []post.Visibility `json:"visibilityIn,omitempty"`
	VisibilityNotIn []post.Visibility `json:"visibilityNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// published_at field predicates
	PublishedAt       *time.Time   `json:"publishedAt,omitempty"`
	PublishedAtNeq    *time.Time   `json:"publishedAtNEQ,omitempty"`
	PublishedAtIn     []*time.Time `json:"publishedAtIn,omitempty"`
	PublishedAtNotIn  []*time.Time `json:"publishedAtNotIn,omitempty"`
	PublishedAtGt     *time.Time   `json:"publishedAtGT,omitempty"`
	PublishedAtGte    *time.Time   `json:"publishedAtGTE,omitempty"`
	PublishedAtLt     *time.Time   `json:"publishedAtLT,omitempty"`
	PublishedAtLte    *time.Time   `json:"publishedAtLTE,omitempty"`
	PublishedAtIsNil  *bool        `json:"publishedAtIsNil,omitempty"`
	PublishedAtNotNil *bool        `json:"publishedAtNotNil,omitempty"`
	// hero_image edge predicates
	HasHeroImage     *bool              `json:"hasHeroImage,omitempty"`
	HasHeroImageWith []*MediaWhereInput `json:"hasHeroImageWith,omitempty"`
	// comments edge predicates
	HasComments     *bool                `json:"hasComments,omitempty"`
	HasCommentsWith []*CommentWhereInput `json:"hasCommentsWith,omitempty"`
	// related_post edge predicates
	HasRelatedPost     *bool             `json:"hasRelatedPost,omitempty"`
	HasRelatedPostWith []*PostWhereInput `json:"hasRelatedPostWith,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
	// author edge predicates
	HasAuthor     *bool             `json:"hasAuthor,omitempty"`
	HasAuthorWith []*UserWhereInput `json:"hasAuthorWith,omitempty"`
	// likes edge predicates
	HasLikes     *bool                 `json:"hasLikes,omitempty"`
	HasLikesWith []*PostLikeWhereInput `json:"hasLikesWith,omitempty"`
	// bookmarks edge predicates
	HasBookmarks     *bool                 `json:"hasBookmarks,omitempty"`
	HasBookmarksWith []*BookmarkWhereInput `json:"hasBookmarksWith,omitempty"`
}

// ProfileTableInfoItemWhereInput is used for filtering ProfileTableInfoItem objects.
// Input was generated by ent.
type ProfileTableInfoItemWhereInput struct {
	Not *ProfileTableInfoItemWhereInput   `json:"not,omitempty"`
	And []*ProfileTableInfoItemWhereInput `json:"and,omitempty"`
	Or  []*ProfileTableInfoItemWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// key field predicates
	Key             *string  `json:"key,omitempty"`
	KeyNeq          *string  `json:"keyNEQ,omitempty"`
	KeyIn           []string `json:"keyIn,omitempty"`
	KeyNotIn        []string `json:"keyNotIn,omitempty"`
	KeyGt           *string  `json:"keyGT,omitempty"`
	KeyGte          *string  `json:"keyGTE,omitempty"`
	KeyLt           *string  `json:"keyLT,omitempty"`
	KeyLte          *string  `json:"keyLTE,omitempty"`
	KeyContains     *string  `json:"keyContains,omitempty"`
	KeyHasPrefix    *string  `json:"keyHasPrefix,omitempty"`
	KeyHasSuffix    *string  `json:"keyHasSuffix,omitempty"`
	KeyEqualFold    *string  `json:"keyEqualFold,omitempty"`
	KeyContainsFold *string  `json:"keyContainsFold,omitempty"`
	// value field predicates
	Value             *string  `json:"value,omitempty"`
	ValueNeq          *string  `json:"valueNEQ,omitempty"`
	ValueIn           []string `json:"valueIn,omitempty"`
	ValueNotIn        []string `json:"valueNotIn,omitempty"`
	ValueGt           *string  `json:"valueGT,omitempty"`
	ValueGte          *string  `json:"valueGTE,omitempty"`
	ValueLt           *string  `json:"valueLT,omitempty"`
	ValueLte          *string  `json:"valueLTE,omitempty"`
	ValueContains     *string  `json:"valueContains,omitempty"`
	ValueHasPrefix    *string  `json:"valueHasPrefix,omitempty"`
	ValueHasSuffix    *string  `json:"valueHasSuffix,omitempty"`
	ValueEqualFold    *string  `json:"valueEqualFold,omitempty"`
	ValueContainsFold *string  `json:"valueContainsFold,omitempty"`
	// community_id field predicates
	CommunityID       *string  `json:"communityID,omitempty"`
	CommunityIdneq    *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn     []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn  []string `json:"communityIDNotIn,omitempty"`
	CommunityIDIsNil  *bool    `json:"communityIDIsNil,omitempty"`
	CommunityIDNotNil *bool    `json:"communityIDNotNil,omitempty"`
	// user_id field predicates
	UserID       *string  `json:"userID,omitempty"`
	UserIdneq    *string  `json:"userIDNEQ,omitempty"`
	UserIDIn     []string `json:"userIDIn,omitempty"`
	UserIDNotIn  []string `json:"userIDNotIn,omitempty"`
	UserIDIsNil  *bool    `json:"userIDIsNil,omitempty"`
	UserIDNotNil *bool    `json:"userIDNotNil,omitempty"`
	// type field predicates
	Type      *profiletableinfoitem.Type  `json:"type,omitempty"`
	TypeNeq   *profiletableinfoitem.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []profiletableinfoitem.Type `json:"typeIn,omitempty"`
	TypeNotIn []profiletableinfoitem.Type `json:"typeNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
	// user edge predicates
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

type Query struct {
}

type RefreshTokenResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type RegisterUserInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RegisterUserResponse struct {
	Message string `json:"message"`
}

type ResendVerifyEmailInput struct {
	Email string `json:"email"`
}

type ResendVerifyEmailResponse struct {
	Message string `json:"message"`
}

// RoleWhereInput is used for filtering Role objects.
// Input was generated by ent.
type RoleWhereInput struct {
	Not *RoleWhereInput   `json:"not,omitempty"`
	And []*RoleWhereInput `json:"and,omitempty"`
	Or  []*RoleWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// title field predicates
	Title             *string  `json:"title,omitempty"`
	TitleNeq          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGt           *string  `json:"titleGT,omitempty"`
	TitleGte          *string  `json:"titleGTE,omitempty"`
	TitleLt           *string  `json:"titleLT,omitempty"`
	TitleLte          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`
	// badge_id field predicates
	BadgeID       *string  `json:"badgeID,omitempty"`
	BadgeIdneq    *string  `json:"badgeIDNEQ,omitempty"`
	BadgeIDIn     []string `json:"badgeIDIn,omitempty"`
	BadgeIDNotIn  []string `json:"badgeIDNotIn,omitempty"`
	BadgeIDIsNil  *bool    `json:"badgeIDIsNil,omitempty"`
	BadgeIDNotNil *bool    `json:"badgeIDNotNil,omitempty"`
	// color field predicates
	Color             *string  `json:"color,omitempty"`
	ColorNeq          *string  `json:"colorNEQ,omitempty"`
	ColorIn           []string `json:"colorIn,omitempty"`
	ColorNotIn        []string `json:"colorNotIn,omitempty"`
	ColorGt           *string  `json:"colorGT,omitempty"`
	ColorGte          *string  `json:"colorGTE,omitempty"`
	ColorLt           *string  `json:"colorLT,omitempty"`
	ColorLte          *string  `json:"colorLTE,omitempty"`
	ColorContains     *string  `json:"colorContains,omitempty"`
	ColorHasPrefix    *string  `json:"colorHasPrefix,omitempty"`
	ColorHasSuffix    *string  `json:"colorHasSuffix,omitempty"`
	ColorIsNil        *bool    `json:"colorIsNil,omitempty"`
	ColorNotNil       *bool    `json:"colorNotNil,omitempty"`
	ColorEqualFold    *string  `json:"colorEqualFold,omitempty"`
	ColorContainsFold *string  `json:"colorContainsFold,omitempty"`
	// community_id field predicates
	CommunityID      *string  `json:"communityID,omitempty"`
	CommunityIdneq   *string  `json:"communityIDNEQ,omitempty"`
	CommunityIDIn    []string `json:"communityIDIn,omitempty"`
	CommunityIDNotIn []string `json:"communityIDNotIn,omitempty"`
	// community_roles_management field predicates
	CommunityRolesManagement    *bool `json:"communityRolesManagement,omitempty"`
	CommunityRolesManagementNeq *bool `json:"communityRolesManagementNEQ,omitempty"`
	// community_user_ban field predicates
	CommunityUserBan    *bool `json:"communityUserBan,omitempty"`
	CommunityUserBanNeq *bool `json:"communityUserBanNEQ,omitempty"`
	// community_user_mute field predicates
	CommunityUserMute    *bool `json:"communityUserMute,omitempty"`
	CommunityUserMuteNeq *bool `json:"communityUserMuteNEQ,omitempty"`
	// community_delete_post field predicates
	CommunityDeletePost    *bool `json:"communityDeletePost,omitempty"`
	CommunityDeletePostNeq *bool `json:"communityDeletePostNEQ,omitempty"`
	// community_remove_post_from_publication field predicates
	CommunityRemovePostFromPublication    *bool `json:"communityRemovePostFromPublication,omitempty"`
	CommunityRemovePostFromPublicationNeq *bool `json:"communityRemovePostFromPublicationNEQ,omitempty"`
	// community_delete_comments field predicates
	CommunityDeleteComments    *bool `json:"communityDeleteComments,omitempty"`
	CommunityDeleteCommentsNeq *bool `json:"communityDeleteCommentsNEQ,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// badge edge predicates
	HasBadge     *bool              `json:"hasBadge,omitempty"`
	HasBadgeWith []*MediaWhereInput `json:"hasBadgeWith,omitempty"`
	// community edge predicates
	HasCommunity     *bool                  `json:"hasCommunity,omitempty"`
	HasCommunityWith []*CommunityWhereInput `json:"hasCommunityWith,omitempty"`
	// users edge predicates
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`
}

type Subscription struct {
}

type UnfollowCommunityInput struct {
	CommunityID string `json:"communityID"`
}

type UnfollowUserInput struct {
	UserID string `json:"userID"`
}

type UnlikePostInput struct {
	PostID string `json:"postID"`
}

type UpdateCommentInput struct {
	ID         string  `json:"id"`
	Content    *string `json:"content,omitempty"`
	MediaID    *string `json:"mediaID,omitempty"`
	HasDeleted *bool   `json:"hasDeleted,omitempty"`
}

type UpdateHostInput struct {
	Title         *string `json:"title,omitempty"`
	Slogan        *string `json:"slogan,omitempty"`
	Contacts      *string `json:"contacts,omitempty"`
	Description   *string `json:"description,omitempty"`
	LogoID        *string `json:"logoID,omitempty"`
	BannerID      *string `json:"bannerID,omitempty"`
	AuthBannerID  *string `json:"authBannerID,omitempty"`
	FirstSettings *bool   `json:"firstSettings,omitempty"`
}

type UpdatePostInput struct {
	ID          string           `json:"id"`
	Title       *string          `json:"title,omitempty"`
	Slug        *string          `json:"slug,omitempty"`
	Content     map[string]any   `json:"content,omitempty"`
	CommunityID *string          `json:"communityID,omitempty"`
	HeroImageID *string          `json:"heroImageID,omitempty"`
	Views       *int32           `json:"views,omitempty"`
	Visibility  *post.Visibility `json:"visibility,omitempty"`
	PublishedAt *time.Time       `json:"publishedAt,omitempty"`
}

type UserAvatarResponse struct {
	ID  string `json:"id"`
	URL string `json:"url"`
}

type UserCommunityRoleResponse struct {
	ID                                 string `json:"id"`
	Title                              string `json:"title"`
	Color                              string `json:"color"`
	CommunityRolesManagement           bool   `json:"communityRolesManagement"`
	CommunityUserBan                   bool   `json:"communityUserBan"`
	CommunityUserMute                  bool   `json:"communityUserMute"`
	CommunityDeletePost                bool   `json:"communityDeletePost"`
	CommunityDeleteComments            bool   `json:"communityDeleteComments"`
	CommunityRemovePostFromPublication bool   `json:"communityRemovePostFromPublication"`
}

type UserFollow struct {
	ID         string    `json:"id"`
	FollowerID string    `json:"followerID"`
	FolloweeID string    `json:"followeeID"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
	Follower   *ent.User `json:"follower"`
	Followee   *ent.User `json:"followee"`
}

func (UserFollow) IsNode() {}

// UserFollowWhereInput is used for filtering UserFollow objects.
// Input was generated by ent.
type UserFollowWhereInput struct {
	Not *UserFollowWhereInput   `json:"not,omitempty"`
	And []*UserFollowWhereInput `json:"and,omitempty"`
	Or  []*UserFollowWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// follower_id field predicates
	FollowerID      *string  `json:"followerID,omitempty"`
	FollowerIdneq   *string  `json:"followerIDNEQ,omitempty"`
	FollowerIDIn    []string `json:"followerIDIn,omitempty"`
	FollowerIDNotIn []string `json:"followerIDNotIn,omitempty"`
	// followee_id field predicates
	FolloweeID      *string  `json:"followeeID,omitempty"`
	FolloweeIdneq   *string  `json:"followeeIDNEQ,omitempty"`
	FolloweeIDIn    []string `json:"followeeIDIn,omitempty"`
	FolloweeIDNotIn []string `json:"followeeIDNotIn,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// follower edge predicates
	HasFollower     *bool             `json:"hasFollower,omitempty"`
	HasFollowerWith []*UserWhereInput `json:"hasFollowerWith,omitempty"`
	// followee edge predicates
	HasFollowee     *bool             `json:"hasFollowee,omitempty"`
	HasFolloweeWith []*UserWhereInput `json:"hasFolloweeWith,omitempty"`
}

type UserHostRoleResponse struct {
	ID                                     string `json:"id"`
	Title                                  string `json:"title"`
	Color                                  string `json:"color"`
	CommunityRolesManagement               bool   `json:"communityRolesManagement"`
	HostUserBan                            bool   `json:"hostUserBan"`
	HostUserMute                           bool   `json:"hostUserMute"`
	HostCommunityDeletePost                bool   `json:"hostCommunityDeletePost"`
	HostCommunityDeleteComments            bool   `json:"hostCommunityDeleteComments"`
	HostCommunityRemovePostFromPublication bool   `json:"hostCommunityRemovePostFromPublication"`
}

type UserInfoResponse struct {
	ID    string `json:"id"`
	Key   string `json:"key"`
	Value string `json:"value"`
}

type UserResponse struct {
	ID               string                       `json:"id"`
	Name             string                       `json:"name"`
	Slug             string                       `json:"slug"`
	Avatar           *UserAvatarResponse          `json:"avatar,omitempty"`
	Email            string                       `json:"email"`
	Description      string                       `json:"description"`
	UserInfo         []*UserInfoResponse          `json:"userInfo"`
	HostRoles        []*UserHostRoleResponse      `json:"hostRoles"`
	CommunitiesRoles []*UserCommunityRoleResponse `json:"communitiesRoles"`
	IsVerified       bool                         `json:"isVerified"`
	CreatedAt        string                       `json:"createdAt"`
	UpdatedAt        string                       `json:"updatedAt"`
}

type UserStatus struct {
	FollowersCount string `json:"followersCount"`
	FollowingCount string `json:"followingCount"`
	PostsCount     string `json:"postsCount"`
	IsHostBanned   bool   `json:"isHostBanned"`
	IsHostMuted    bool   `json:"isHostMuted"`
	IsFollowing    bool   `json:"isFollowing"`
}

// UserWhereInput is used for filtering User objects.
// Input was generated by ent.
type UserWhereInput struct {
	Not *UserWhereInput   `json:"not,omitempty"`
	And []*UserWhereInput `json:"and,omitempty"`
	Or  []*UserWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// slug field predicates
	Slug             *string  `json:"slug,omitempty"`
	SlugNeq          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGt           *string  `json:"slugGT,omitempty"`
	SlugGte          *string  `json:"slugGTE,omitempty"`
	SlugLt           *string  `json:"slugLT,omitempty"`
	SlugLte          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`
	// avatar_id field predicates
	AvatarID       *string  `json:"avatarID,omitempty"`
	AvatarIdneq    *string  `json:"avatarIDNEQ,omitempty"`
	AvatarIDIn     []string `json:"avatarIDIn,omitempty"`
	AvatarIDNotIn  []string `json:"avatarIDNotIn,omitempty"`
	AvatarIDIsNil  *bool    `json:"avatarIDIsNil,omitempty"`
	AvatarIDNotNil *bool    `json:"avatarIDNotNil,omitempty"`
	// banner_id field predicates
	BannerID       *string  `json:"bannerID,omitempty"`
	BannerIdneq    *string  `json:"bannerIDNEQ,omitempty"`
	BannerIDIn     []string `json:"bannerIDIn,omitempty"`
	BannerIDNotIn  []string `json:"bannerIDNotIn,omitempty"`
	BannerIDIsNil  *bool    `json:"bannerIDIsNil,omitempty"`
	BannerIDNotNil *bool    `json:"bannerIDNotNil,omitempty"`
	// description field predicates
	Description             *string  `json:"description,omitempty"`
	DescriptionNeq          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGt           *string  `json:"descriptionGT,omitempty"`
	DescriptionGte          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLt           *string  `json:"descriptionLT,omitempty"`
	DescriptionLte          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        *bool    `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       *bool    `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`
	// email field predicates
	Email             *string  `json:"email,omitempty"`
	EmailNeq          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGt           *string  `json:"emailGT,omitempty"`
	EmailGte          *string  `json:"emailGTE,omitempty"`
	EmailLt           *string  `json:"emailLT,omitempty"`
	EmailLte          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`
	// password_hash field predicates
	PasswordHash             *string  `json:"passwordHash,omitempty"`
	PasswordHashNeq          *string  `json:"passwordHashNEQ,omitempty"`
	PasswordHashIn           []string `json:"passwordHashIn,omitempty"`
	PasswordHashNotIn        []string `json:"passwordHashNotIn,omitempty"`
	PasswordHashGt           *string  `json:"passwordHashGT,omitempty"`
	PasswordHashGte          *string  `json:"passwordHashGTE,omitempty"`
	PasswordHashLt           *string  `json:"passwordHashLT,omitempty"`
	PasswordHashLte          *string  `json:"passwordHashLTE,omitempty"`
	PasswordHashContains     *string  `json:"passwordHashContains,omitempty"`
	PasswordHashHasPrefix    *string  `json:"passwordHashHasPrefix,omitempty"`
	PasswordHashHasSuffix    *string  `json:"passwordHashHasSuffix,omitempty"`
	PasswordHashEqualFold    *string  `json:"passwordHashEqualFold,omitempty"`
	PasswordHashContainsFold *string  `json:"passwordHashContainsFold,omitempty"`
	// salt field predicates
	Salt             *string  `json:"salt,omitempty"`
	SaltNeq          *string  `json:"saltNEQ,omitempty"`
	SaltIn           []string `json:"saltIn,omitempty"`
	SaltNotIn        []string `json:"saltNotIn,omitempty"`
	SaltGt           *string  `json:"saltGT,omitempty"`
	SaltGte          *string  `json:"saltGTE,omitempty"`
	SaltLt           *string  `json:"saltLT,omitempty"`
	SaltLte          *string  `json:"saltLTE,omitempty"`
	SaltContains     *string  `json:"saltContains,omitempty"`
	SaltHasPrefix    *string  `json:"saltHasPrefix,omitempty"`
	SaltHasSuffix    *string  `json:"saltHasSuffix,omitempty"`
	SaltEqualFold    *string  `json:"saltEqualFold,omitempty"`
	SaltContainsFold *string  `json:"saltContainsFold,omitempty"`
	// is_verified field predicates
	IsVerified    *bool `json:"isVerified,omitempty"`
	IsVerifiedNeq *bool `json:"isVerifiedNEQ,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// avatar edge predicates
	HasAvatar     *bool              `json:"hasAvatar,omitempty"`
	HasAvatarWith []*MediaWhereInput `json:"hasAvatarWith,omitempty"`
	// banner edge predicates
	HasBanner     *bool              `json:"hasBanner,omitempty"`
	HasBannerWith []*MediaWhereInput `json:"hasBannerWith,omitempty"`
	// user_info edge predicates
	HasUserInfo     *bool                             `json:"hasUserInfo,omitempty"`
	HasUserInfoWith []*ProfileTableInfoItemWhereInput `json:"hasUserInfoWith,omitempty"`
	// host_roles edge predicates
	HasHostRoles     *bool                 `json:"hasHostRoles,omitempty"`
	HasHostRolesWith []*HostRoleWhereInput `json:"hasHostRolesWith,omitempty"`
	// communities_roles edge predicates
	HasCommunitiesRoles     *bool             `json:"hasCommunitiesRoles,omitempty"`
	HasCommunitiesRolesWith []*RoleWhereInput `json:"hasCommunitiesRolesWith,omitempty"`
	// communities_bans edge predicates
	HasCommunitiesBans     *bool                         `json:"hasCommunitiesBans,omitempty"`
	HasCommunitiesBansWith []*CommunityUserBanWhereInput `json:"hasCommunitiesBansWith,omitempty"`
	// communities_mutes edge predicates
	HasCommunitiesMutes     *bool                          `json:"hasCommunitiesMutes,omitempty"`
	HasCommunitiesMutesWith []*CommunityUserMuteWhereInput `json:"hasCommunitiesMutesWith,omitempty"`
	// posts edge predicates
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`
	// comments edge predicates
	HasComments     *bool                `json:"hasComments,omitempty"`
	HasCommentsWith []*CommentWhereInput `json:"hasCommentsWith,omitempty"`
	// following edge predicates
	HasFollowing     *bool                   `json:"hasFollowing,omitempty"`
	HasFollowingWith []*UserFollowWhereInput `json:"hasFollowingWith,omitempty"`
	// followers edge predicates
	HasFollowers     *bool                   `json:"hasFollowers,omitempty"`
	HasFollowersWith []*UserFollowWhereInput `json:"hasFollowersWith,omitempty"`
	// communities_follow edge predicates
	HasCommunitiesFollow     *bool                        `json:"hasCommunitiesFollow,omitempty"`
	HasCommunitiesFollowWith []*CommunityFollowWhereInput `json:"hasCommunitiesFollowWith,omitempty"`
	// communities_owner edge predicates
	HasCommunitiesOwner     *bool                  `json:"hasCommunitiesOwner,omitempty"`
	HasCommunitiesOwnerWith []*CommunityWhereInput `json:"hasCommunitiesOwnerWith,omitempty"`
	// communities_moderator edge predicates
	HasCommunitiesModerator     *bool                           `json:"hasCommunitiesModerator,omitempty"`
	HasCommunitiesModeratorWith []*CommunityModeratorWhereInput `json:"hasCommunitiesModeratorWith,omitempty"`
	// posts_likes edge predicates
	HasPostsLikes     *bool                 `json:"hasPostsLikes,omitempty"`
	HasPostsLikesWith []*PostLikeWhereInput `json:"hasPostsLikesWith,omitempty"`
	// comments_likes edge predicates
	HasCommentsLikes     *bool                    `json:"hasCommentsLikes,omitempty"`
	HasCommentsLikesWith []*CommentLikeWhereInput `json:"hasCommentsLikesWith,omitempty"`
	// bookmarks edge predicates
	HasBookmarks     *bool                 `json:"hasBookmarks,omitempty"`
	HasBookmarksWith []*BookmarkWhereInput `json:"hasBookmarksWith,omitempty"`
	// email_verifications edge predicates
	HasEmailVerifications     *bool                          `json:"hasEmailVerifications,omitempty"`
	HasEmailVerificationsWith []*EmailVerificationWhereInput `json:"hasEmailVerificationsWith,omitempty"`
}

type VerifyEmailInput struct {
	Token string `json:"token"`
}

type VerifyEmailResponse struct {
	Message string `json:"message"`
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderDirection) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderDirection) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
