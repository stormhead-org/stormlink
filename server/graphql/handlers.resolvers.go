package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"log"
	"math/rand"
	"stormlink/server/ent"
	"stormlink/server/ent/community"
	"stormlink/server/ent/communityuserban"
	"stormlink/server/ent/communityusermute"
	"stormlink/server/ent/post"
	"stormlink/server/ent/profiletableinfoitem"
	"stormlink/server/ent/role"
	"stormlink/server/ent/user"
	"stormlink/server/ent/userfollow"
	"stormlink/server/graphql/models"
	authpb "stormlink/server/grpc/auth/protobuf"
	mailpb "stormlink/server/grpc/mail/protobuf"
	mediapb "stormlink/server/grpc/media/protobuf"
	userpb "stormlink/server/grpc/user/protobuf"
	"stormlink/server/model"
	"stormlink/server/model/converter"
	"stormlink/server/pkg/auth"
	httpWithCookies "stormlink/server/pkg/http"
	"stormlink/server/pkg/mapper"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/gosimple/slug"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/emptypb"
)

// ViewerPermissions для запроса сообществ.
func (r *communityResolver) ViewerPermissions(ctx context.Context, obj *ent.Community) (*model.CommunityPermissions, error) {
	// 1) Пытаемся достать userID из контекста
	userID, err := auth.UserIDFromContext(ctx)
	fmt.Println("▶ ViewerPermissions, userID from ctx:", userID, "err:", err)
	if err != nil {
		// аноним — никаких прав
		return &model.CommunityPermissions{}, nil
	}

	communityID := obj.ID

	// 2) Спрашиваем именно по одному сообществу
	permsMap, err := r.UserUC.GetPermissionsByCommunities(ctx, userID, []int{communityID})
	if err != nil {
		return nil, fmt.Errorf("failed loading perms: %w", err)
	}
	base := permsMap[communityID]
	if base == nil {
		base = &model.CommunityPermissions{}
	}
	cm := converter.ConvertPermissionsToCommunityPermissions(base)

	// 3) Если юзер — владелец сообщества, даём ему полный набор community-прав
	communityEntity, err := r.Client.Community.Get(ctx, communityID)
	if err == nil && communityEntity.OwnerID == userID {
		cm.CommunityOwner = true
		cm.CommunityRolesManagement = true
		cm.CommunityUserBan = true
		cm.CommunityUserMute = true
		cm.CommunityDeletePost = true
		cm.CommunityDeleteComments = true
		cm.CommunityRemovePostFromPublication = true
	}

	// 4) Если юзер — владелец платформы
	hostEntity, err := r.Client.Host.Get(ctx, 1)
	if err == nil && hostEntity.OwnerID != nil && *hostEntity.OwnerID == userID {
		cm.HostOwner = true
	}

	return cm, nil
}

// CommunityStatus возвращает статус сообщества для текущего пользователя.
func (r *communityResolver) CommunityStatus(ctx context.Context, obj *ent.Community) (*models.CommunityStatus, error) {
	// 1) Получаем userID из контекста (анонимы получат пустой статус)
	userID, err := auth.UserIDFromContext(ctx)
	if err != nil {
		// аноним — просто вернём нулевой объект
		return &models.CommunityStatus{
			FollowersCount: "0",
			PostsCount:     "0",
			IsFollowing:    false,
			IsBanned:       false,
			IsMuted:        false,
		}, nil
	}

	// 2) Вызываем usecase для одного сообщества
	status, err := r.CommunityUC.GetCommunityStatus(ctx, userID, obj.ID)
	if err != nil {
		return nil, fmt.Errorf("CommunityStatus usecase: %w", err)
	}

	return status, nil
}

// Мутация Host для настроек платформы.
func (r *mutationResolver) Host(ctx context.Context, input models.UpdateHostInput) (*ent.Host, error) {
	upd := r.Client.Host.UpdateOneID(1)
	// каждый Set* вызываем только если в input поле не nil
	if input.Title != nil {
		upd = upd.SetTitle(*input.Title)
	}
	if input.Slogan != nil {
		upd = upd.SetSlogan(*input.Slogan)
	}
	if input.Contacts != nil {
		upd = upd.SetContacts(*input.Contacts)
	}
	if input.Description != nil {
		upd = upd.SetDescription(*input.Description)
	}
	if input.FirstSettings != nil {
		upd = upd.SetFirstSettings(*input.FirstSettings)
	}
	return upd.Save(ctx)
}

// Мутация Post для редактирования поста
func (r *mutationResolver) Post(ctx context.Context, input models.UpdatePostInput) (*ent.Post, error) {
	id, err := strconv.Atoi(input.ID)
	if err != nil {
		return nil, fmt.Errorf("invalid post ID %q: %w", input.ID, err)
	}
	upd := r.Client.Post.
		UpdateOneID(id)
	if input.Title != nil {
		upd = upd.SetTitle(*input.Title)
	}
	if input.Slug != nil {
		upd = upd.SetSlug(*input.Slug)
	}
	if input.Content != nil {
		upd = upd.SetContent(input.Content)
	}
	if input.HeroImageID != nil {
		heroID, err := strconv.Atoi(*input.HeroImageID)
		if err != nil {
			return nil, fmt.Errorf("invalid heroImageID %q: %w", *input.HeroImageID, err)
		}
		upd = upd.SetHeroImageID(heroID)
	}
	if input.Views != nil {
		upd = upd.SetViews(int(*input.Views))
	}
	if input.Status != nil {
		upd = upd.SetStatus(*input.Status)
	}
	if input.PublishedAt != nil {
		upd = upd.SetPublishedAt(*input.PublishedAt)
	}
	return upd.Save(ctx)
}

// CreatePost создает новый пост и генерирует slug.
func (r *mutationResolver) CreatePost(ctx context.Context, input models.CreatePostInput) (*ent.Post, error) {
	baseSlug := slug.Make(input.Title)
	suffix := rand.Intn(90_000_000) + 10_000_000
	finalSlug := fmt.Sprintf("%s-%d", baseSlug, suffix)

	communityID, err := strconv.Atoi(input.CommunityID)
	if err != nil {
		return nil, fmt.Errorf("invalid communityID: %w", err)
	}

	authorID, err := strconv.Atoi(input.AuthorID)
	if err != nil {
		return nil, fmt.Errorf("invalid authorID: %w", err)
	}
	builder := r.Client.Post.
		Create().
		SetTitle(input.Title).
		SetSlug(finalSlug).
		SetContent(input.Content).
		SetAuthorID(authorID).
		SetCommunityID(communityID)

	if input.HeroImageID != nil {
		if mediaID, err := strconv.Atoi(*input.HeroImageID); err == nil {
			builder = builder.SetHeroImageID(mediaID)
		}
	}

	if input.Status != nil {
		builder = builder.SetStatus(post.Status(*input.Status))
	}

	if input.PublishedAt != nil {
		builder = builder.SetPublishedAt(time.Time(*input.PublishedAt))
	}

	newPost, err := builder.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create post: %w", err)
	}
	return newPost, nil
}

// CreateCommunity создает новое сообщество.
func (r *mutationResolver) CreateCommunity(ctx context.Context, input models.CreateCommunityInput) (*ent.Community, error) {
	exists, err := r.Client.Community.
		Query().
		Where(community.SlugEQ(input.Slug)).
		Exist(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to check existing slug: %w", err)
	}
	if exists {
		return nil, gqlerror.Errorf("Community with slug %q already exists", input.Slug)
	}

	newComm, err := r.Client.Community.
		Create().
		SetTitle(input.Title).
		SetSlug(input.Slug).
		SetNillableDescription(input.Description).
		SetOwnerID(func() int {
			id, _ := strconv.Atoi(input.OwnerID)
			return id
		}()).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create community: %w", err)
	}
	return newComm, nil
}

// Мутация LoginUser вызывает gRPC методы авторизации юзера
func (r *mutationResolver) LoginUser(ctx context.Context, input models.LoginUserInput) (*models.LoginUserResponse, error) {
	// Вызываем gRPC-метод Login
	resp, err := r.AuthClient.Login(ctx, &authpb.LoginRequest{
		Email:    input.Email,
		Password: input.Password,
	})
	if err != nil {
		log.Printf("❌ [LoginUser] gRPC Login error: %v", err)
		return nil, err
	}

	// Мапим gRPC-пользователя в GraphQL-пользователя
	user, err := mapper.ProtoToGraphQLUser(resp.User)
	if err != nil {
		log.Printf("❌ [LoginUser] Failed to map user: %v", err)
		return nil, status.Errorf(codes.Internal, "failed to map user: %v", err)
	}

	// Ставим куки в HTTP-ответе
	if w := httpWithCookies.GetHTTPResponseWriter(ctx); w != nil {
		httpWithCookies.SetAuthCookies(w, resp.AccessToken, resp.RefreshToken)
		log.Println("✅ [LoginUser] Cookies set successfully")
	} else {
		log.Println("⚠️ [LoginUser] HTTP response writer not found, cookies not set")
	}

	return &models.LoginUserResponse{
		AccessToken:  resp.AccessToken,
		RefreshToken: resp.RefreshToken,
		User:         user,
	}, nil
}

// Мутация LogoutUser удаляет куки и сессию у авторизованного пользователя.
func (r *mutationResolver) LogoutUser(ctx context.Context) (*models.LogoutUserResponse, error) {
	// Извлекаем заголовок Authorization
	authHeader, _ := ctx.Value("authorization").(string)
	if authHeader != "" {
		ctx = metadata.AppendToOutgoingContext(ctx, "authorization", authHeader)
	}

	// Вызываем gRPC-метод Logout
	resp, err := r.AuthClient.Logout(ctx, &emptypb.Empty{})
	if err != nil {
		log.Printf("❌ [LogoutUser] gRPC Logout error: %v", err)
		return nil, err
	}

	// Очищаем HTTP-куки
	if w := httpWithCookies.GetHTTPResponseWriter(ctx); w != nil {
		httpWithCookies.ClearAuthCookies(w)
		log.Println("✅ [LogoutUser] Cookies cleared successfully")
	} else {
		log.Println("⚠️ [LogoutUser] HTTP response writer not found, cookies not cleared")
	}

	return &models.LogoutUserResponse{
		Message: resp.Message,
	}, nil
}

// Мутация RegisterUser вызывает gRPC методы для регистрации пользователей.
func (r *mutationResolver) RegisterUser(ctx context.Context, input models.RegisterUserInput) (*models.RegisterUserResponse, error) {
	// Проверяем входные данные
	if input.Name == "" || input.Email == "" || input.Password == "" {
		log.Println("❌ [RegisterUser] Missing required fields")
		return nil, errors.New("name, email, and password are required")
	}

	// Вызываем gRPC-метод RegisterUser
	resp, err := r.UserClient.RegisterUser(ctx, &userpb.RegisterUserRequest{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
	})
	if err != nil {
		log.Printf("❌ [RegisterUser] gRPC RegisterUser error: %v", err)
		return nil, err
	}

	// Формируем ответ GraphQL
	return &models.RegisterUserResponse{
		Message: resp.Message,
	}, nil
}

// Мутация UserVerifyEmail проверяет токен из письма и подтверждает статус юзера.
func (r *mutationResolver) UserVerifyEmail(ctx context.Context, input models.VerifyEmailInput) (*models.VerifyEmailResponse, error) {
	// Проверяем входной токен
	if input.Token == "" {
		log.Println("❌ [UserVerifyEmail] Token is required")
		return nil, errors.New("token is required")
	}

	// Вызываем gRPC-метод VerifyEmail
	resp, err := r.MailClient.VerifyEmail(ctx, &mailpb.VerifyEmailRequest{
		Token: input.Token,
	})
	if err != nil {
		log.Printf("❌ [UserVerifyEmail] gRPC VerifyEmail error: %v", err)
		return nil, err
	}

	return &models.VerifyEmailResponse{
		Message: resp.Message,
	}, nil
}

// ResendUserVerifyEmail is the resolver for the resendUserVerifyEmail field.
func (r *mutationResolver) ResendUserVerifyEmail(ctx context.Context, input models.ResendVerifyEmailInput) (*models.ResendVerifyEmailResponse, error) {
	panic(fmt.Errorf("not implemented: ResendUserVerifyEmail - resendUserVerifyEmail"))
}

// Мутация UserRefreshToken обновляет сессию пользователя.
func (r *mutationResolver) UserRefreshToken(ctx context.Context) (*models.RefreshTokenResponse, error) {
	// 1. Извлекаем HTTP-запрос из контекста, чтобы достать cookie
	httpReq := httpWithCookies.GetHTTPRequest(ctx)
	var refreshToken string
	if httpReq != nil {
		if cookie, err := httpReq.Cookie("refresh_token"); err == nil {
			refreshToken = cookie.Value
		}
	}

	// Если в куке нет refresh_token, попробуем взять его из входящих аргументов (если вы где-то передаёте)
	// Но раз у вас прототип не принимает аргументы, достаточно из cookie.

	if refreshToken == "" {
		return nil, fmt.Errorf("refresh token is missing")
	}

	// 2. Приклеиваем Authorization (опционально, только если он нужен внутри gRPC-RefreshToken)
	authHeader, _ := ctx.Value("authorization").(string)
	if authHeader != "" {
		ctx = metadata.AppendToOutgoingContext(ctx, "authorization", authHeader)
	}

	// 3. Вызываем gRPC-метод с заполненным refreshToken
	resp, err := r.AuthClient.RefreshToken(ctx, &authpb.RefreshTokenRequest{
		RefreshToken: refreshToken,
	})
	if err != nil {
		log.Printf("❌ [UserRefreshToken] gRPC RefreshToken error: %v", err)
		return nil, err
	}

	// 4. Ставим новые куки
	if w := httpWithCookies.GetHTTPResponseWriter(ctx); w != nil {
		httpWithCookies.SetAuthCookies(w, resp.AccessToken, resp.RefreshToken)
		log.Println("✅ [UserRefreshToken] Cookies set successfully")
	} else {
		log.Println("⚠️ [UserRefreshToken] HTTP response writer not found, cookies not set")
	}

	return &models.RefreshTokenResponse{
		AccessToken:  resp.AccessToken,
		RefreshToken: resp.RefreshToken,
	}, nil
}

// UploadMedia is the resolver for the uploadMedia field.
func (r *mutationResolver) UploadMedia(ctx context.Context, file graphql.Upload, dir *string) (*ent.Media, error) {
	// 1) Читаем содержимое файла
	var buf bytes.Buffer
	if _, err := io.Copy(&buf, file.File); err != nil {
		return nil, fmt.Errorf("failed to read uploaded file: %w", err)
	}
	content := buf.Bytes()

	// 2) Прокидываем Authorization из контекста, если есть
	if authHeader, _ := ctx.Value("authorization").(string); authHeader != "" {
		ctx = metadata.AppendToOutgoingContext(ctx, "authorization", authHeader)
	}

	// 3) Формируем gRPC-запрос
	grpcReq := &mediapb.UploadMediaRequest{
		Dir:         "media",
		Filename:    file.Filename,
		FileContent: content,
	}
	if dir != nil && *dir != "" {
		grpcReq.Dir = *dir
	}

	// 4) Вызываем gRPC
	resp, err := r.MediaClient.UploadMedia(ctx, grpcReq)
	if err != nil {
		log.Printf("❌ gRPC UploadMedia error: %v", err)
		return nil, fmt.Errorf("gRPC UploadMedia error: %w", err)
	}

	// 5) Конвертируем ответ в ent.Media (*string поля)
	fileName := resp.GetFilename()
	URL := resp.GetUrl()
	return &ent.Media{
		ID:       int(resp.GetId()),
		Filename: &fileName,
		URL:      &URL,
	}, nil
}

// FollowUser мутация подписки на пользователя.
func (r *mutationResolver) FollowUser(ctx context.Context, input models.FollowUserInput) (*models.UserStatus, error) {
	// 1) Узнаём currentUserID
	currentUserID, err := auth.UserIDFromContext(ctx)
	if err != nil {
			return nil, fmt.Errorf("unauthorized")
	}
	// 2) Создаём запись в user_follow
	uID, _ := strconv.Atoi(input.UserID)
	_, err = r.Client.UserFollow.
			Create().
			SetFollowerID(currentUserID).
			SetFolloweeID(uID).
			Save(ctx)
	if err != nil {
			return nil, fmt.Errorf("failed follow: %w", err)
	}
	// 3) Возвращаем актуальный UserStatus (используя ваш usecase)
	status, err := r.UserUC.GetUserStatus(ctx, currentUserID, uID)
	if err != nil {
			return nil, fmt.Errorf("refresh status: %w", err)
	}
	return status, nil
}

// UnfollowUser мутация отписки от пользователя.
func (r *mutationResolver) UnfollowUser(ctx context.Context, input models.UnfollowUserInput) (*models.UserStatus, error) {
	currentUserID, err := auth.UserIDFromContext(ctx)
    if err != nil {
        return nil, fmt.Errorf("unauthorized")
    }
    // Удаляем запись
		uID, _ := strconv.Atoi(input.UserID)
    _, err = r.Client.UserFollow.
        Delete().
        Where(
            userfollow.FollowerIDEQ(currentUserID),
            userfollow.FolloweeIDEQ(uID),
        ).
        Exec(ctx)
    if err != nil {
        return nil, fmt.Errorf("failed unfollow: %w", err)
    }
    status, err := r.UserUC.GetUserStatus(ctx, currentUserID, uID)
    if err != nil {
        return nil, fmt.Errorf("refresh status: %w", err)
    }
    return status, nil
}

// ViewerPermissions для запрос постов.
func (r *postResolver) ViewerPermissions(ctx context.Context, obj *ent.Post) (*model.CommunityPermissions, error) {
	// 1) Пытаемся достать userID из контекста
	userID, err := auth.UserIDFromContext(ctx)
	fmt.Println("▶ ViewerPermissions, userID from ctx:", userID, "err:", err)
	if err != nil {
		// аноним — никаких прав
		return &model.CommunityPermissions{}, nil
	}

	communityID := obj.CommunityID

	// 2) Спрашиваем именно по одному сообществу
	permsMap, err := r.UserUC.GetPermissionsByCommunities(ctx, userID, []int{communityID})
	if err != nil {
		return nil, fmt.Errorf("failed loading perms: %w", err)
	}
	base := permsMap[communityID]
	if base == nil {
		base = &model.CommunityPermissions{}
	}
	cm := converter.ConvertPermissionsToCommunityPermissions(base)

	// 3) Если юзер — владелец сообщества, даём ему полный набор community-прав
	communityEntity, err := r.Client.Community.Get(ctx, communityID)
	if err == nil && communityEntity.OwnerID == userID {
		cm.CommunityOwner = true
		cm.CommunityRolesManagement = true
		cm.CommunityUserBan = true
		cm.CommunityUserMute = true
		cm.CommunityDeletePost = true
		cm.CommunityDeleteComments = true
		cm.CommunityRemovePostFromPublication = true
	}

	// 4) Если юзер — владелец платформы
	hostEntity, err := r.Client.Host.Get(ctx, 1)
	if err == nil && hostEntity.OwnerID != nil && *hostEntity.OwnerID == userID {
		cm.HostOwner = true
	}

	return cm, nil
}

// Media возвращает медиа по ID.
func (r *queryResolver) Media(ctx context.Context, id string) (*ent.Media, error) {
	mediaId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Media.Get(ctx, mediaId)
}

// Community отдает одно сообщество по ID.
func (r *queryResolver) Community(ctx context.Context, id string) (*ent.Community, error) {
	communityId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Community.Get(ctx, communityId)
}

// CommunityBySlug отдает одно сообщество по slug.
func (r *queryResolver) CommunityBySlug(ctx context.Context, slug string) (*ent.Community, error) {
	return r.Client.Community.
		Query().
		Where(community.SlugEQ(slug)).
		WithLogo().
		WithBanner().
		WithOwner().
		WithModerators().
		WithRules().
		WithCommunityInfo().
		WithRoles().
		Only(ctx)
}

// Communities возвращает все или только не забаненные сообщества.
func (r *queryResolver) Communities(ctx context.Context, onlyNotBanned *bool) ([]*ent.Community, error) {
	q := r.Client.Community.Query()
	if onlyNotBanned == nil || *onlyNotBanned {
		q = q.Where(community.CommunityHasBanned(false))
	}
	return q.Order(ent.Asc("id")).All(ctx)
}

// CommunityUserBan отдает запись о бане юзера по userID и communityID.
func (r *queryResolver) CommunityUserBan(ctx context.Context, communityID string, userID string) (*ent.CommunityUserBan, error) {
	cid, err := strconv.Atoi(communityID)
	if err != nil {
		return nil, err
	}
	uid, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}
	ban, err := r.Client.CommunityUserBan.
		Query().
		Where(
			communityuserban.CommunityIDEQ(cid),
			communityuserban.UserIDEQ(uid),
		).
		Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return ban, err
}

// CommunityUserMute отдает запись о муте юзера по userID и communityID.
func (r *queryResolver) CommunityUserMute(ctx context.Context, communityID string, userID string) (*ent.CommunityUserMute, error) {
	cid, err := strconv.Atoi(communityID)
	if err != nil {
		return nil, err
	}
	uid, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}
	mute, err := r.Client.CommunityUserMute.
		Query().
		Where(
			communityusermute.CommunityIDEQ(cid),
			communityusermute.UserIDEQ(uid),
		).
		Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	return mute, err
}

// CommunityModerator is the resolver for the communityModerator field.
func (r *queryResolver) CommunityModerator(ctx context.Context, communityID string, userID string) (*ent.CommunityModerator, error) {
	panic(fmt.Errorf("not implemented: CommunityModerator - communityModerator"))
}

// CommunityRule is the resolver for the communityRule field.
func (r *queryResolver) CommunityRule(ctx context.Context, id string) (*ent.CommunityRule, error) {
	panic(fmt.Errorf("not implemented: CommunityRule - communityRule"))
}

// GetMe отдает текущего авторизованного пользователя.
func (r *queryResolver) GetMe(ctx context.Context) (*models.UserResponse, error) {
	// Извлекаем userID из контекста
	userID, ok := ctx.Value("userID").(int)
	if !ok || userID == 0 {
		log.Println("❌ GraphQL: unauthenticated, no userID in context")
		return nil, fmt.Errorf("unauthenticated")
	}

	// Извлекаем заголовок Authorization
	authHeader, ok := ctx.Value("authorization").(string)
	if !ok || authHeader == "" {
		log.Println("❌ GraphQL: missing authorization header")
		return nil, fmt.Errorf("missing authorization header")
	}

	// Добавляем Authorization в gRPC-метаданные
	ctx = metadata.AppendToOutgoingContext(ctx, "authorization", authHeader)

	// Вызываем gRPC-метод GetMe
	resp, err := r.AuthClient.GetMe(ctx, &emptypb.Empty{})
	if err != nil {
		log.Printf("❌ GraphQL: failed to call GetMe: %v", err)
		return nil, fmt.Errorf("failed to get user: %v", err)
	}

	// Мапим gRPC-пользователя в GraphQL-пользователя
	user, err := mapper.ProtoToGraphQLUser(resp.User)
	if err != nil {
		log.Printf("❌ [LoginUser] Failed to map user: %v", err)
		return nil, status.Errorf(codes.Internal, "failed to map user: %v", err)
	}

	return user, nil
}

// User отдает одного пользователя по ID.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	userId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.User.Get(ctx, userId)
}

// UserBySlug отдает одного пользователя по slug.
func (r *queryResolver) UserBySlug(ctx context.Context, slug string) (*ent.User, error) {
	return r.Client.User.
		Query().
		Where(user.SlugEQ(slug)).
		WithAvatar().
		WithBanner().
		WithUserInfo().
		WithHostRoles().
		WithCommunitiesRoles().
		WithCommunitiesBans().
		WithCommunitiesMutes().
		WithPosts().
		Only(ctx)
}

// Users возвращает всех пользователей.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.Client.User.
		Query().
		Order(ent.Asc("id")).
		All(ctx)
}

// ProfileTableInfoItem возвращает один итем профиля по ID итема.
func (r *queryResolver) ProfileTableInfoItem(ctx context.Context, id string) (*ent.ProfileTableInfoItem, error) {
	itemId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.ProfileTableInfoItem.Get(ctx, itemId)
}

// ProfileTableInfoItems отдает все итемы, которые есть у профиля.
func (r *queryResolver) ProfileTableInfoItems(ctx context.Context, id string, typeArg profiletableinfoitem.Type) ([]*ent.ProfileTableInfoItem, error) {
	profileID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	q := r.Client.ProfileTableInfoItem.Query()
	switch typeArg {
	case profiletableinfoitem.TypeCommunity:
		q = q.Where(profiletableinfoitem.CommunityIDEQ(profileID))
	case profiletableinfoitem.TypeUser:
		q = q.Where(profiletableinfoitem.UserIDEQ(profileID))
	default:
		return nil, fmt.Errorf("unsupported ProfileTableInfoItemType %q", typeArg)
	}

	return q.Order(ent.Asc("id")).All(ctx)
}

// Post отдает один пост по ID.
func (r *queryResolver) Post(ctx context.Context, id string) (*ent.Post, error) {
	postId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Post.
		Query().
		Where(post.IDEQ(postId)).
		WithCommunity().
		WithAuthor().
		Only(ctx)
}

// Posts возвращает посты в зависимости от их статуса.
func (r *queryResolver) Posts(ctx context.Context, status *post.Status, communityID *string, authorID *string) ([]*ent.Post, error) {
	// 1) статус
	st := post.StatusPublished
	if status != nil {
		st = *status
	}

	// 2) базовый запрос
	q := r.Client.Post.
		Query().
		Where(post.StatusEQ(st))

	// 3) фильтр по сообществу, если передан
	if communityID != nil {
		cid, err := strconv.Atoi(*communityID)
		if err != nil {
			return nil, fmt.Errorf("invalid communityID %q: %w", *communityID, err)
		}
		q = q.Where(post.CommunityIDEQ(cid))
	}

	// 4) фильтр по автору, если передан
	if authorID != nil {
		aid, err := strconv.Atoi(*authorID)
		if err != nil {
			return nil, fmt.Errorf("invalid authorID %q: %w", *authorID, err)
		}
		q = q.Where(post.AuthorIDEQ(aid))
	}

	// 5) подгружаем связи и отдаем результат
	posts, err := q.
		WithCommunity().
		WithAuthor().
		All(ctx)
	if err != nil {
		return nil, err
	}
	return posts, nil
}

// Role возвращает роль по ее ID.
func (r *queryResolver) Role(ctx context.Context, id string) (*ent.Role, error) {
	roleId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Role.Get(ctx, roleId)
}

// Roles возвращает все роли сообщества по ID сообщества.
func (r *queryResolver) Roles(ctx context.Context, id string) ([]*ent.Role, error) {
	communityId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	q := r.Client.Role.Query()
	q = q.Where(role.CommunityIDEQ(communityId))
	return q.Order(ent.Asc("id")).All(ctx)
}

// HostRole возвращает роль хоста по ее ID.
func (r *queryResolver) HostRole(ctx context.Context, id string) (*ent.HostRole, error) {
	hostRoleId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.HostRole.Get(ctx, hostRoleId)
}

// HostRoles возвращает список всех ролей платформы.
func (r *queryResolver) HostRoles(ctx context.Context) ([]*ent.HostRole, error) {
	return r.Client.HostRole.
		Query().
		Order(ent.Asc("id")).
		All(ctx)
}

// HostUserBan отдает одного забаненного пользователя по ID.
func (r *queryResolver) HostUserBan(ctx context.Context, id string) (*ent.HostUserBan, error) {
	hostUserBanId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.HostUserBan.Get(ctx, hostUserBanId)
}

// HostUsersBan возвращает список забаненных юзеров на платформе.
func (r *queryResolver) HostUsersBan(ctx context.Context) ([]*ent.HostUserBan, error) {
	return r.Client.HostUserBan.
		Query().
		Order(ent.Asc("id")).
		All(ctx)
}

// HostSidebarNavigationItems возвращает список всех итемов навигации платформы.
func (r *queryResolver) HostSidebarNavigationItems(ctx context.Context) ([]*ent.HostSidebarNavigationItem, error) {
	return r.Client.HostSidebarNavigationItem.
		Query().
		Order(ent.Asc("id")).
		All(ctx)
}

// HostSidebarNavigation всегда отдаёт HostSidebarNavigation с ID 1.
func (r *queryResolver) HostSidebarNavigation(ctx context.Context) (*ent.HostSidebarNavigation, error) {
	return r.Client.HostSidebarNavigation.Get(ctx, 1)
}

// HostSocialNavigation всегда отдаёт HostSocialNavigation с ID 1.
func (r *queryResolver) HostSocialNavigation(ctx context.Context) (*ent.HostSocialNavigation, error) {
	return r.Client.HostSocialNavigation.Get(ctx, 1)
}

// Host всегда отдаёт хост с ID 1.
func (r *queryResolver) Host(ctx context.Context) (*ent.Host, error) {
	return r.Client.Host.Get(ctx, 1)
}

// UserStatus возвращает статус пользователя.
func (r *userResolver) UserStatus(ctx context.Context, obj *ent.User) (*models.UserStatus, error) {
	// 1) Получаем currentUserID из контекста (анонимы получат пустой статус)
	currentUserID, err := auth.UserIDFromContext(ctx)
	if err != nil {
		// аноним — просто вернём нулевой объект
		return &models.UserStatus{
			FollowersCount: "0",
			FollowingCount: "0",
			PostsCount:     "0",
			IsHostBanned:   false,
			IsHostMuted:    false,
			IsFollowing:    false,
		}, nil
	}

	// 2) Вызываем usecase для юзера
	status, err := r.UserUC.GetUserStatus(ctx, currentUserID, obj.ID)
	if err != nil {
		return nil, fmt.Errorf("UserStatus usecase: %w", err)
	}

	return status, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
