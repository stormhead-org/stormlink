package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"stormlink/server/ent"
	"stormlink/server/ent/community"
	"strconv"
)

// Host is the resolver for the host field.
func (r *mutationResolver) Host(ctx context.Context, input UpdateHostInput) (*ent.Host, error) {
	upd := r.Client.Host.UpdateOneID(1)
	// каждый Set* вызываем только если в input поле не nil
	if input.Title != nil {
		upd = upd.SetTitle(*input.Title)
	}
	if input.Slogan != nil {
		upd = upd.SetSlogan(*input.Slogan)
	}
	if input.Contacts != nil {
		upd = upd.SetContacts(*input.Contacts)
	}
	if input.Description != nil {
		upd = upd.SetDescription(*input.Description)
	}
	if input.FirstSettings != nil {
		upd = upd.SetFirstSettings(*input.FirstSettings)
	}
	return upd.Save(ctx)
}

// Communities возвращает все или только не забаненные сообщества:
func (r *queryResolver) Communities(ctx context.Context, onlyNotBanned *bool) ([]*ent.Community, error) {
	q := r.Client.Community.Query()
	if onlyNotBanned == nil || *onlyNotBanned {
		q = q.Where(community.CommunityHasBanned(false))
	}
	return q.Order(ent.Asc("id")).All(ctx)
}

// Users возвращает всех пользователей:
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.Client.User.
		Query().
		Order(ent.Asc("id")).
		All(ctx)
}

// User отдает одного пользователя по ID:
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	userId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return r.Client.User.Get(ctx, userId)
}

// HostRoles возвращает список всех ролей платформы:
func (r *queryResolver) HostRoles(ctx context.Context) ([]*ent.HostRole, error) {
	return r.Client.HostRole.
		Query().
		Order(ent.Asc("id")).
		All(ctx)
}

// Host всегда отдаёт хост с ID 1.
func (r *queryResolver) Host(ctx context.Context) (*ent.Host, error) {
	return r.Client.Host.Get(ctx, 1)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
