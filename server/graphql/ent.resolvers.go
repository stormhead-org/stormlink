package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"stormlink/server/ent"
)

// TableInfo is the resolver for the tableInfo field.
func (r *communityResolver) TableInfo(ctx context.Context, obj *ent.Community) (*string, error) {
	panic(fmt.Errorf("not implemented: TableInfo - tableInfo"))
}

// Logo is the resolver for the logo field.
func (r *communityResolver) Logo(ctx context.Context, obj *ent.Community) (*Media, error) {
	panic(fmt.Errorf("not implemented: Logo - logo"))
}

// Banner is the resolver for the banner field.
func (r *communityResolver) Banner(ctx context.Context, obj *ent.Community) (*Media, error) {
	panic(fmt.Errorf("not implemented: Banner - banner"))
}

// Moderators is the resolver for the moderators field.
func (r *communityResolver) Moderators(ctx context.Context, obj *ent.Community) ([]*CommunityModerators, error) {
	panic(fmt.Errorf("not implemented: Moderators - moderators"))
}

// Roles is the resolver for the roles field.
func (r *communityResolver) Roles(ctx context.Context, obj *ent.Community) ([]*Role, error) {
	panic(fmt.Errorf("not implemented: Roles - roles"))
}

// Rules is the resolver for the rules field.
func (r *communityResolver) Rules(ctx context.Context, obj *ent.Community) ([]*CommunityRule, error) {
	panic(fmt.Errorf("not implemented: Rules - rules"))
}

// Followers is the resolver for the followers field.
func (r *communityResolver) Followers(ctx context.Context, obj *ent.Community) ([]*CommunityFollow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// Bans is the resolver for the bans field.
func (r *communityResolver) Bans(ctx context.Context, obj *ent.Community) ([]*CommunityUsersBan, error) {
	panic(fmt.Errorf("not implemented: Bans - bans"))
}

// Mutes is the resolver for the mutes field.
func (r *communityResolver) Mutes(ctx context.Context, obj *ent.Community) ([]*CommunityUsersMute, error) {
	panic(fmt.Errorf("not implemented: Mutes - mutes"))
}

// Posts is the resolver for the posts field.
func (r *communityResolver) Posts(ctx context.Context, obj *ent.Community) ([]*Post, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comments is the resolver for the comments field.
func (r *communityResolver) Comments(ctx context.Context, obj *ent.Community) ([]*Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Communities is the resolver for the communities field.
func (r *queryResolver) Communities(ctx context.Context, onlyNotBanned *bool) ([]*ent.Community, error) {
	panic(fmt.Errorf("not implemented: Communities - communities"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// TableInfo is the resolver for the tableInfo field.
func (r *userResolver) TableInfo(ctx context.Context, obj *ent.User) (*string, error) {
	panic(fmt.Errorf("not implemented: TableInfo - tableInfo"))
}

// Avatar is the resolver for the avatar field.
func (r *userResolver) Avatar(ctx context.Context, obj *ent.User) (*Media, error) {
	panic(fmt.Errorf("not implemented: Avatar - avatar"))
}

// Banner is the resolver for the banner field.
func (r *userResolver) Banner(ctx context.Context, obj *ent.User) (*Media, error) {
	panic(fmt.Errorf("not implemented: Banner - banner"))
}

// HostRoles is the resolver for the hostRoles field.
func (r *userResolver) HostRoles(ctx context.Context, obj *ent.User) ([]*HostRole, error) {
	panic(fmt.Errorf("not implemented: HostRoles - hostRoles"))
}

// CommunitiesRoles is the resolver for the communitiesRoles field.
func (r *userResolver) CommunitiesRoles(ctx context.Context, obj *ent.User) ([]*Role, error) {
	panic(fmt.Errorf("not implemented: CommunitiesRoles - communitiesRoles"))
}

// CommunitiesBans is the resolver for the communitiesBans field.
func (r *userResolver) CommunitiesBans(ctx context.Context, obj *ent.User) ([]*CommunityUsersBan, error) {
	panic(fmt.Errorf("not implemented: CommunitiesBans - communitiesBans"))
}

// CommunitiesMutes is the resolver for the communitiesMutes field.
func (r *userResolver) CommunitiesMutes(ctx context.Context, obj *ent.User) ([]*CommunityUsersMute, error) {
	panic(fmt.Errorf("not implemented: CommunitiesMutes - communitiesMutes"))
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *ent.User) ([]*Post, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comments is the resolver for the comments field.
func (r *userResolver) Comments(ctx context.Context, obj *ent.User) ([]*Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Following is the resolver for the following field.
func (r *userResolver) Following(ctx context.Context, obj *ent.User) ([]*UserFollow, error) {
	panic(fmt.Errorf("not implemented: Following - following"))
}

// Followers is the resolver for the followers field.
func (r *userResolver) Followers(ctx context.Context, obj *ent.User) ([]*UserFollow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// CommunitiesFollow is the resolver for the communitiesFollow field.
func (r *userResolver) CommunitiesFollow(ctx context.Context, obj *ent.User) ([]*CommunityFollow, error) {
	panic(fmt.Errorf("not implemented: CommunitiesFollow - communitiesFollow"))
}

// CommunitiesModerator is the resolver for the communitiesModerator field.
func (r *userResolver) CommunitiesModerator(ctx context.Context, obj *ent.User) ([]*CommunityModerators, error) {
	panic(fmt.Errorf("not implemented: CommunitiesModerator - communitiesModerator"))
}

// PostsLikes is the resolver for the postsLikes field.
func (r *userResolver) PostsLikes(ctx context.Context, obj *ent.User) ([]*PostLike, error) {
	panic(fmt.Errorf("not implemented: PostsLikes - postsLikes"))
}

// CommentsLikes is the resolver for the commentsLikes field.
func (r *userResolver) CommentsLikes(ctx context.Context, obj *ent.User) ([]*CommentLike, error) {
	panic(fmt.Errorf("not implemented: CommentsLikes - commentsLikes"))
}

// Bookmarks is the resolver for the bookmarks field.
func (r *userResolver) Bookmarks(ctx context.Context, obj *ent.User) ([]*Bookmark, error) {
	panic(fmt.Errorf("not implemented: Bookmarks - bookmarks"))
}

// EmailVerifications is the resolver for the emailVerifications field.
func (r *userResolver) EmailVerifications(ctx context.Context, obj *ent.User) ([]*EmailVerification, error) {
	panic(fmt.Errorf("not implemented: EmailVerifications - emailVerifications"))
}

// Community returns CommunityResolver implementation.
func (r *Resolver) Community() CommunityResolver { return &communityResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type communityResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
