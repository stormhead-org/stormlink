package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"stormlink/server/ent"
	"stormlink/server/graphql/models"
)

// Moderators is the resolver for the moderators field.
func (r *communityResolver) Moderators(ctx context.Context, obj *ent.Community) ([]*models.CommunityModerator, error) {
	panic(fmt.Errorf("not implemented: Moderators - moderators"))
}

// Rules is the resolver for the rules field.
func (r *communityResolver) Rules(ctx context.Context, obj *ent.Community) ([]*models.CommunityRule, error) {
	panic(fmt.Errorf("not implemented: Rules - rules"))
}

// Followers is the resolver for the followers field.
func (r *communityResolver) Followers(ctx context.Context, obj *ent.Community) ([]*models.CommunityFollow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// Comments is the resolver for the comments field.
func (r *communityResolver) Comments(ctx context.Context, obj *ent.Community) ([]*models.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Rules is the resolver for the rules field.
func (r *hostResolver) Rules(ctx context.Context, obj *ent.Host) ([]*models.HostRule, error) {
	panic(fmt.Errorf("not implemented: Rules - rules"))
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *ent.Post) ([]*models.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Likes is the resolver for the likes field.
func (r *postResolver) Likes(ctx context.Context, obj *ent.Post) ([]*models.PostLike, error) {
	panic(fmt.Errorf("not implemented: Likes - likes"))
}

// Bookmarks is the resolver for the bookmarks field.
func (r *postResolver) Bookmarks(ctx context.Context, obj *ent.Post) ([]*models.Bookmark, error) {
	panic(fmt.Errorf("not implemented: Bookmarks - bookmarks"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Comments is the resolver for the comments field.
func (r *userResolver) Comments(ctx context.Context, obj *ent.User) ([]*models.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Following is the resolver for the following field.
func (r *userResolver) Following(ctx context.Context, obj *ent.User) ([]*models.UserFollow, error) {
	panic(fmt.Errorf("not implemented: Following - following"))
}

// Followers is the resolver for the followers field.
func (r *userResolver) Followers(ctx context.Context, obj *ent.User) ([]*models.UserFollow, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// CommunitiesFollow is the resolver for the communitiesFollow field.
func (r *userResolver) CommunitiesFollow(ctx context.Context, obj *ent.User) ([]*models.CommunityFollow, error) {
	panic(fmt.Errorf("not implemented: CommunitiesFollow - communitiesFollow"))
}

// CommunitiesModerator is the resolver for the communitiesModerator field.
func (r *userResolver) CommunitiesModerator(ctx context.Context, obj *ent.User) ([]*models.CommunityModerator, error) {
	panic(fmt.Errorf("not implemented: CommunitiesModerator - communitiesModerator"))
}

// PostsLikes is the resolver for the postsLikes field.
func (r *userResolver) PostsLikes(ctx context.Context, obj *ent.User) ([]*models.PostLike, error) {
	panic(fmt.Errorf("not implemented: PostsLikes - postsLikes"))
}

// CommentsLikes is the resolver for the commentsLikes field.
func (r *userResolver) CommentsLikes(ctx context.Context, obj *ent.User) ([]*models.CommentLike, error) {
	panic(fmt.Errorf("not implemented: CommentsLikes - commentsLikes"))
}

// Bookmarks is the resolver for the bookmarks field.
func (r *userResolver) Bookmarks(ctx context.Context, obj *ent.User) ([]*models.Bookmark, error) {
	panic(fmt.Errorf("not implemented: Bookmarks - bookmarks"))
}

// EmailVerifications is the resolver for the emailVerifications field.
func (r *userResolver) EmailVerifications(ctx context.Context, obj *ent.User) ([]*models.EmailVerification, error) {
	panic(fmt.Errorf("not implemented: EmailVerifications - emailVerifications"))
}

// Community returns CommunityResolver implementation.
func (r *Resolver) Community() CommunityResolver { return &communityResolver{r} }

// Host returns HostResolver implementation.
func (r *Resolver) Host() HostResolver { return &hostResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type communityResolver struct{ *Resolver }
type hostResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
