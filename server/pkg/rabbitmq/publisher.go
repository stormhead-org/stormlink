package rabbitmq

import (
	"encoding/json"
	"errors"
	"log"
	"os"

	"github.com/joho/godotenv"
	amqp "github.com/rabbitmq/amqp091-go"
)

var rabbitURL string

func init() {
	// –ï—Å–ª–∏ RABBITMQ_URL –Ω–µ –∑–∞–¥–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –∏–∑ –ø–∞–ø–∫–∏ server
	if os.Getenv("RABBITMQ_URL") == "" {
		if err := godotenv.Load("server/.env"); err != nil {
			log.Println("üîç .env –¥–ª—è RabbitMQ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–º–æ—Ç—Ä–∏–º –≤ —Ä–µ–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
		}
	}
	rabbitURL = os.Getenv("RABBITMQ_URL")
}

// EmailJob ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ –ø–æ—á—Ç–µ.
type EmailJob struct {
    To    string `json:"to"`
    Token string `json:"token"`
}

// PublishEmailJob –ø—É–±–ª–∏–∫—É–µ—Ç EmailJob –≤ –æ—á–µ—Ä–µ–¥—å "email_verification".
func PublishEmailJob(job EmailJob) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RABBITMQ_URL –∑–∞–¥–∞–Ω–∞
	if rabbitURL == "" {
		err := errors.New("–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RABBITMQ_URL –Ω–µ –∑–∞–¥–∞–Ω–∞")
		log.Printf("‚ùå RabbitMQ: %v", err)
		return err
	}

    // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ DialConfig, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º–∞—É—Ç.
    conn, err := amqp.Dial(rabbitURL)
    if err != nil {
        log.Printf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: %v", err)
        return err
    }
    defer conn.Close()

    ch, err := conn.Channel()
    if err != nil {
        log.Printf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª: %v", err)
        return err
    }
    defer ch.Close()

    // –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å (–µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç)
    q, err := ch.QueueDeclare(
        "email_verification", // –∏–º—è –æ—á–µ—Ä–µ–¥–∏
        true,                 // durable
        false,                // delete when unused
        false,                // exclusive
        false,                // no-wait
        nil,                  // arguments
    )
    if err != nil {
        log.Printf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å: %v", err)
        return err
    }

    body, err := json.Marshal(job)
    if err != nil {
        return err
    }

    // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    err = ch.Publish(
        "",     // exchange (–ø—É—Å—Ç–∞—è ‚Äî default exchange)
        q.Name, // routing key = –∏–º—è –æ—á–µ—Ä–µ–¥–∏
        false,  // mandatory
        false,  // immediate
        amqp.Publishing{
            DeliveryMode: amqp.Persistent,
            ContentType:  "application/json",
            Body:         body,
        },
    )
    if err != nil {
        log.Printf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
        return err
    }

    log.Printf("‚úÖ RabbitMQ: –∑–∞–¥–∞—á–∞ email job –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: %+v", job)
    return nil
}
