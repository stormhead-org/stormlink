package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"path/filepath"
	"runtime"
	"stormlink/server/grpc/auth"
	"stormlink/server/grpc/user"

	"entgo.io/ent/dialect/sql/schema"

	gwruntime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/joho/godotenv"
	"google.golang.org/grpc"

	"stormlink/server/ent"
	authpb "stormlink/server/grpc/auth/protobuf"
	userpb "stormlink/server/grpc/user/protobuf"

	_ "github.com/lib/pq"
)

func main() {
	// –ü—É—Ç—å –∫ .env
	_, currentFile, _, _ := runtime.Caller(0)
	projectRoot := filepath.Join(filepath.Dir(currentFile), "../..")

	_ = godotenv.Load(filepath.Join(projectRoot, "server/.env"))

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	dsn := fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		os.Getenv("DB_HOST"), os.Getenv("DB_PORT"),
		os.Getenv("DB_USER"), os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"), os.Getenv("SSL_MODE"),
	)
	client, err := ent.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ: %v", err)
	}
	defer client.Close()

	// –ú–∏–≥—Ä–∞—Ü–∏–∏
	resetDB := flag.Bool("reset-db", false, "drop and recreate all tables and columns")
	flag.Parse()

	if *resetDB {
		log.Println("‚ö†Ô∏è  –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤...")
		if err := client.Schema.Create(
			context.Background(),
			schema.WithDropIndex(true),
			schema.WithDropColumn(true),
		); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –°–±—Ä–æ—Å –±–∞–∑—ã –∑–∞–≤–µ—Ä—à—ë–Ω.")
	} else {
		log.Println("‚ÑπÔ∏è  –û–±—ã—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã...")
		if err := client.Schema.Create(context.Background()); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC —Å–µ—Ä–≤–µ—Ä–∞
	grpcServer := grpc.NewServer()

	userService := user.NewUserService(client)
	userpb.RegisterUserServiceServer(grpcServer, userService)

	authService := auth.NewAuthService(client)
	authpb.RegisterAuthServiceServer(grpcServer, authService)


	// gRPC listener (–Ω–∞ 9090)
	go func() {
		listener, err := net.Listen("tcp", ":9090")
		if err != nil {
			log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç 9090: %v", err)
		}
		log.Println("üì° gRPC-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :9090")
		if err := grpcServer.Serve(listener); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ gRPC-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// HTTP Gateway mux
	ctx := context.Background()
	gwmux := gwruntime.NewServeMux()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º grpc-gateway —Ö–µ–Ω–¥–ª–µ—Ä—ã
	err = userpb.RegisterUserServiceHandlerFromEndpoint(ctx, gwmux, "localhost:9090", []grpc.DialOption{grpc.WithInsecure()})
	if err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å grpc-gateway —Ö–µ–Ω–¥–ª–µ—Ä UserService: %v", err)
	}

	err = authpb.RegisterAuthServiceHandlerFromEndpoint(ctx, gwmux, "localhost:9090", []grpc.DialOption{grpc.WithInsecure()})
	if err != nil {
	log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å grpc-gateway —Ö–µ–Ω–¥–ª–µ—Ä AuthService: %v", err)
	}


	// HTTP —Å–µ—Ä–≤–µ—Ä (–Ω–∞ 8080)
	log.Println("üåê HTTP-—Å–µ—Ä–≤–µ—Ä (grpc-gateway) –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
	if err := http.ListenAndServe(":8080", gwmux); err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ HTTP-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
