package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"golang.org/x/time/rate"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/emptypb"
	"log"
	"net"
	"net/http"
	"os"
	"stormlink/server/grpc/auth"
	"stormlink/server/grpc/user"
	"stormlink/server/middleware"
	"stormlink/server/usecase"
	"stormlink/server/utils"
	"time"

	"entgo.io/ent/dialect/sql/schema"

	gwruntime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/joho/godotenv"
	"github.com/rs/cors"
	"google.golang.org/grpc"
	"stormlink/server/ent"
	authpb "stormlink/server/grpc/auth/protobuf"
	userpb "stormlink/server/grpc/user/protobuf"

	_ "github.com/lib/pq"
)

func initEnv() {
	err := godotenv.Load("server/.env")
	if err != nil {
		log.Println("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
}

// chainInterceptors –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ interceptors –≤ –æ–¥–∏–Ω
func chainInterceptors(interceptors ...grpc.UnaryServerInterceptor) grpc.UnaryServerInterceptor {
	return func(
		ctx context.Context,
		req interface{},
		info *grpc.UnaryServerInfo,
		handler grpc.UnaryHandler,
	) (interface{}, error) {
		// –ï—Å–ª–∏ –Ω–µ—Ç interceptors, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º handler
		if len(interceptors) == 0 {
			return handler(ctx, req)
		}

		// –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ interceptor
		var chainHandler grpc.UnaryHandler = handler
		for i := len(interceptors) - 1; i >= 0; i-- {
			current := interceptors[i]
			// –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π handler, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π interceptor
			chainHandler = func(currentCtx context.Context, currentReq interface{}, currentInfo *grpc.UnaryServerInfo, next grpc.UnaryHandler) grpc.UnaryHandler {
				return func(ctx context.Context, req interface{}) (interface{}, error) {
					return current(ctx, req, currentInfo, next)
				}
			}(ctx, req, info, chainHandler)
		}

		// –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π handler –≤ —Ü–µ–ø–æ—á–∫–µ
		return chainHandler(ctx, req)
	}
}

func main() {
	// –ü—É—Ç—å –∫ .env
	initEnv()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	dsn := fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		os.Getenv("DB_HOST"), os.Getenv("DB_PORT"),
		os.Getenv("DB_USER"), os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"), os.Getenv("SSL_MODE"),
	)
	client, err := ent.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ: %v", err)
	}
	defer client.Close()

	// –ú–∏–≥—Ä–∞—Ü–∏–∏
	resetDB := flag.Bool("reset-db", false, "drop and recreate all tables and columns")
	flag.Parse()

	if *resetDB {
		log.Println("‚ö†Ô∏è  –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤...")
		if err := client.Schema.Create(
			context.Background(),
			schema.WithDropIndex(true),
			schema.WithDropColumn(true),
		); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –°–±—Ä–æ—Å –±–∞–∑—ã –∑–∞–≤–µ—Ä—à—ë–Ω.")
	} else {
		log.Println("‚ÑπÔ∏è  –û–±—ã—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã...")
		if err := client.Schema.Create(context.Background()); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RateLimiter: 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É, burst 3
	rl := middleware.NewRateLimiter(rate.Limit(1), 3)

	// –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º middleware
	chain := []grpc.UnaryServerInterceptor{
		middleware.RateLimitInterceptor(rl),
		middleware.GRPCAuthInterceptor,
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC —Å–µ—Ä–≤–µ—Ä–∞
	grpcServer := grpc.NewServer(
		grpc.UnaryInterceptor(chainInterceptors(chain...)),
	)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserUsecase
	userUsecase := usecase.NewUserUsecase(client)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	userService := user.NewUserService(client, userUsecase)
	userpb.RegisterUserServiceServer(grpcServer, userService)

	authService := auth.NewAuthService(client)
	authpb.RegisterAuthServiceServer(grpcServer, authService)

	// gRPC listener (–Ω–∞ 4000)
	go func() {
		listener, err := net.Listen("tcp", ":4000")
		if err != nil {
			log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç 4000: %v", err)
		}
		log.Println("üì° gRPC-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :4000")
		if err := grpcServer.Serve(listener); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ gRPC-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC-—Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
	grpcConn, err := grpc.Dial("localhost:4000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ gRPC-—Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}
	defer grpcConn.Close()

	// HTTP Gateway mux
	ctx := context.Background()
	gwmux := gwruntime.NewServeMux(
		gwruntime.WithErrorHandler(func(ctx context.Context, mux *gwruntime.ServeMux, marshaler gwruntime.Marshaler, w http.ResponseWriter, r *http.Request, err error) {
			statusCode := codes.Unknown
			if st, ok := status.FromError(err); ok {
				statusCode = st.Code()
			}
			if statusCode == codes.ResourceExhausted {
				http.Error(w, `{"error": "rate limit exceeded, try again later"}`, http.StatusTooManyRequests)
				return
			}
			gwruntime.DefaultHTTPErrorHandler(ctx, mux, marshaler, w, r, err)
		}),
	)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º grpc-gateway —Ö–µ–Ω–¥–ª–µ—Ä—ã (–∫—Ä–æ–º–µ login –∏ refresh-token)
	err = userpb.RegisterUserServiceHandlerFromEndpoint(ctx, gwmux, "localhost:4000", []grpc.DialOption{grpc.WithInsecure()})
	if err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å grpc-gateway —Ö–µ–Ω–¥–ª–µ—Ä UserService: %v", err)
	}

	// –ö–∞—Å—Ç–æ–º–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
	mux := http.NewServeMux()
	mux.HandleFunc("/v1/users/login", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
			return
		}

		var req authpb.LoginRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, `{"error": "invalid request body"}`, http.StatusBadRequest)
			return
		}

		authClient := authpb.NewAuthServiceClient(grpcConn)
		resp, err := authClient.Login(r.Context(), &req)
		if err != nil {
			http.Error(w, fmt.Sprintf(`{"error": "%v"}`, err), http.StatusUnauthorized)
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
		utils.SetAuthCookies(w, resp.AccessToken, resp.RefreshToken)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—Ç–≤–µ—Ç
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(resp)
	})

	mux.HandleFunc("/v1/users/logout", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
			return
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
		authHeader := r.Header.Get("Authorization")

		// –°–æ–∑–¥–∞–µ–º gRPC-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
		md := metadata.New(map[string]string{})
		if authHeader != "" {
			md.Set("authorization", authHeader)
		}

		// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
		ctx := metadata.NewOutgoingContext(r.Context(), md)

		authClient := authpb.NewAuthServiceClient(grpcConn)
		resp, err := authClient.Logout(ctx, &emptypb.Empty{})
		if err != nil {
			http.Error(w, fmt.Sprintf(`{"error": "%v"}`, err), http.StatusInternalServerError)
			return
		}

		// –û—á–∏—â–∞–µ–º –∫—É–∫–∏
		http.SetCookie(w, &http.Cookie{
			Name:     "auth_token",
			Value:    "",
			Path:     "/",
			Domain:   "localhost",
			Expires:  time.Unix(0, 0),
			MaxAge:   -1,
			HttpOnly: false,
			SameSite: http.SameSiteLaxMode,
		})
		http.SetCookie(w, &http.Cookie{
			Name:     "refresh_token",
			Value:    "",
			Path:     "/",
			Domain:   "localhost",
			Expires:  time.Unix(0, 0),
			MaxAge:   -1,
			HttpOnly: true,
			SameSite: http.SameSiteLaxMode,
		})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—Ç–≤–µ—Ç
		w.Header().Set("Content-Type", "application/json")
		if err := json.NewEncoder(w).Encode(resp); err != nil {
			http.Error(w, `{"error": "failed to encode response"}`, http.StatusInternalServerError)
			return
		}

	})

	mux.HandleFunc("/v1/users/refresh-token", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
			return
		}

		var req authpb.RefreshTokenRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏, –µ—Å–ª–∏ —Ç–µ–ª–æ –ø—É—Å—Ç–æ–µ
			cookie, err := r.Cookie("refresh_token")
			if err == nil && cookie != nil {
				req.RefreshToken = cookie.Value
			} else {
				http.Error(w, `{"error": "refresh token required"}`, http.StatusBadRequest)
				return
			}
		}

		authClient := authpb.NewAuthServiceClient(grpcConn)
		resp, err := authClient.RefreshToken(r.Context(), &req)
		if err != nil {
			http.Error(w, fmt.Sprintf(`{"error": "%v"}`, err), http.StatusUnauthorized)
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
		utils.SetAuthCookies(w, resp.AccessToken, resp.RefreshToken)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—Ç–≤–µ—Ç
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(resp)
	})

	// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ gRPC-Gateway
	mux.Handle("/", gwmux)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
	corsHandler := cors.New(cors.Options{
		AllowedOrigins:   []string{"http://localhost:3000"},
		AllowedMethods:   []string{"GET", "POST", "OPTIONS"},
		AllowedHeaders:   []string{"Authorization", "Content-Type"},
		ExposedHeaders:   []string{"Set-Cookie"},
		AllowCredentials: true,
	}).Handler(mux)

	// HTTP —Å–µ—Ä–≤–µ—Ä (–Ω–∞ 4080)
	httpServer := &http.Server{
		Addr: ":4080",
		Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			corsHandler.ServeHTTP(w, r)
		}),
	}

	log.Println("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :4080")
	if err := httpServer.ListenAndServe(); err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ HTTP-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
