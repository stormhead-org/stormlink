package main

import (
	"flag"
	"log"
	"net/http"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"stormlink/server/cmd/modules"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
	modules.InitEnv()
	modules.InitS3Client()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	client := modules.ConnectDB()
	defer client.Close()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª–∞–≥–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	resetDB := flag.Bool("reset-db", false, "drop and recreate all tables and columns")
	seed := flag.Bool("seed", false, "seed roles, default host etc.")
	flag.Parse()

	// –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	modules.MigrateDB(client, *resetDB, *seed)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ gRPC-—Å–µ—Ä–≤–µ—Ä–∞
	grpcServer := modules.SetupGRPCServer(client)

	// –ó–∞–ø—É—Å–∫ gRPC-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go modules.StartGRPCServer(grpcServer)

	// üöÄ –ó–∞–ø—É—Å–∫ GraphQL-—Å–µ—Ä–≤–µ—Ä–∞
	go modules.StartGraphQLServer(client)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC-—Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTTP-—Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
	grpcConn, err := grpc.Dial("localhost:4000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ gRPC-—Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}
	defer grpcConn.Close()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-–º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞
	mux := http.NewServeMux()

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HTTP-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏–∑ modules/handlers.go
	mux.HandleFunc("/v1/users/login", func(w http.ResponseWriter, r *http.Request) {
		modules.LoginHandler(w, r, grpcConn)
	})
	mux.HandleFunc("/v1/users/logout", func(w http.ResponseWriter, r *http.Request) {
		modules.LogoutHandler(w, r, grpcConn)
	})
	mux.HandleFunc("/v1/users/refresh-token", func(w http.ResponseWriter, r *http.Request) {
		modules.RefreshTokenHandler(w, r, grpcConn)
	})
	mux.HandleFunc("/v1/media/upload", func(w http.ResponseWriter, r *http.Request) {
		modules.MediaUploadHandler(w, r, grpcConn, client)
	})
	mux.HandleFunc("/storage/", modules.StorageHandler)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	httpServer := modules.SetupHTTPServer(grpcConn, mux)
	modules.StartHTTPServer(httpServer)
}
