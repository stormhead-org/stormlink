package main

import (
	"context"
	"encoding/json"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/joho/godotenv"
	amqp "github.com/rabbitmq/amqp091-go"

	"stormlink/server/pkg/mail"
)

var rabbitURL string

type EmailJob struct {
    To    string `json:"to"`
    Token string `json:"token"`
}

func main() {
	if err := godotenv.Load("server/.env"); err != nil {
		log.Println("üîç .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ server/, —Å–º–æ—Ç—Ä–∏–º –≤ —Ä–µ–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
	}

    rabbitURL = os.Getenv("RABBITMQ_URL")
	if rabbitURL == "" {
		log.Fatalf("‚ùå RabbitMQ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RABBITMQ_URL –Ω–µ –∑–∞–¥–∞–Ω–∞")
	}

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
    conn, err := amqp.Dial(rabbitURL)
    if err != nil {
        log.Fatalf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: %v", err)
    }
    defer conn.Close()

    ch, err := conn.Channel()
    if err != nil {
        log.Fatalf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª: %v", err)
    }
    defer ch.Close()

    // –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ —É –Ω–∞—Å –≤ publisher)
    q, err := ch.QueueDeclare(
        "email_verification",
        true,  // durable
        false, // delete when unused
        false, // exclusive
        false, // no-wait
        nil,   // args
    )
    if err != nil {
        log.Fatalf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å: %v", err)
    }

    msgs, err := ch.Consume(
        q.Name, // queue
        "",     // consumer
        false,  // auto-ack (–º—ã —Å–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        false,  // exclusive
        false,  // no-local
        false,  // no-wait
        nil,    // args
    )
    if err != nil {
        log.Fatalf("‚ùå RabbitMQ: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: %v", err)
    }

    // –ö–∞–Ω–∞–ª –¥–ª—è graceful shutdown
    ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
    defer cancel()

    log.Println("üì¨ Email worker –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π...")

    forever := make(chan struct{})

    go func() {
        for {
            select {
            case <-ctx.Done():
                log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä")
                close(forever)
                return
            case d, ok := <-msgs:
                if !ok {
                    log.Println("üîí –ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç, –≤—ã—Ö–æ–¥–∏–º")
                    close(forever)
                    return
                }

                var job EmailJob
                if err := json.Unmarshal(d.Body, &job); err != nil {
                    log.Printf("‚ùå RabbitMQ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏: %v", err)
                    d.Nack(false, false) // –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º
                    continue
                }

                // –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–∞
                if err := mail.SendVerifyEmail(job.To, job.Token); err != nil {
                    log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ %s: %v", job.To, err)
                    d.Nack(false, true) // –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
                    continue
                }

                log.Printf("‚úÖ –ü–∏—Å—å–º–æ —Å —Ç–æ–∫–µ–Ω–æ–º %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %s", job.Token, job.To)
                d.Ack(false)
            }
        }
    }()

    <-forever
    log.Println("üëã Email worker –∑–∞–≤–µ—Ä—à—ë–Ω")
}
