// server/cmd/modules/graphql_server.go
package modules

import (
	"context"
	"log"
	"net/http"
	"time"

	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/handler/extension"
	"github.com/99designs/gqlgen/graphql/handler/transport"
	"github.com/99designs/gqlgen/graphql/playground"
	"github.com/gorilla/websocket"
	"github.com/rs/cors"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	"stormlink/server/ent"
	"stormlink/server/graphql"
	authpb "stormlink/server/grpc/auth/protobuf"
	mailpb "stormlink/server/grpc/mail/protobuf"
	mediapb "stormlink/server/grpc/media/protobuf"
	userpb "stormlink/server/grpc/user/protobuf"
	"stormlink/server/middleware"
	httpWithCookies "stormlink/server/pkg/http"
	"stormlink/server/usecase/community"
	"stormlink/server/usecase/user"
)

func StartGraphQLServer(client *ent.Client) {
	// 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC-—Å–µ—Ä–≤–µ—Ä—É –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
	conn, err := grpc.DialContext(
		context.Background(),
		"localhost:4000",
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ gRPC-—Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}

	// 2) –°–æ–∑–¥–∞—ë–º gRPC-–∫–ª–∏–µ–Ω—Ç—ã
	authClient := authpb.NewAuthServiceClient(conn)
	userClient := userpb.NewUserServiceClient(conn)
	mailClient := mailpb.NewMailServiceClient(conn)
	mediaClient := mediapb.NewMediaServiceClient(conn)

	// 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTTPAuthMiddleware
	middleware.InitHTTPAuthMiddleware(authClient)

	// 4) –°—Ç–µ–∫ usecase –∏ —Ä–µ–∑–æ–ª–≤–µ—Ä—ã
	uUC := user.NewUserUsecase(client)
	cUC := community.NewCommunityUsecase(client)
	resolver := &graphql.Resolver{
		Client:       client,
		UserUC:       uUC,
		CommunityUC:  cUC,
		AuthClient:   authClient,
		UserClient:   userClient,
		MailClient:   mailClient,
		MediaClient:  mediaClient,
	}

	// 5) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º gqlgen-—Å–µ—Ä–≤–µ—Ä –≤—Ä—É—á–Ω—É—é (–Ω–µ NewDefaultServer)
	srv := handler.New(graphql.NewExecutableSchema(graphql.Config{
		Resolvers: resolver,
	}))

    // –í–∫–ª—é—á–∞–µ–º introspection (—Ç–æ–ª—å–∫–æ –≤ DEV!)
    srv.Use(extension.Introspection{})

	// 5a) HTTP POST –∏ GET
	srv.AddTransport(transport.POST{})
	srv.AddTransport(transport.GET{})

	// 5b) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) multipart form (upload)
	srv.AddTransport(transport.MultipartForm{})

	// 5c) WebSocket –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
	srv.AddTransport(&transport.Websocket{
		Upgrader: websocket.Upgrader{
			// –ü–æ–∑–≤–æ–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ª—é–±—ã—Ö Origin (–∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é –ª–æ–≥–∏–∫—É)
			CheckOrigin: func(r *http.Request) bool { return true },
		},
		KeepAlivePingInterval: 10 * time.Second,
	})

	// 6) HTTP –º–∞—Ä—à—Ä—É—Ç—ã
	mux := http.NewServeMux()
	// Playground –Ω–∞ –∫–æ—Ä–Ω–µ
	mux.Handle("/", playground.Handler("GraphQL playground", "/query"))
	// GraphQL endpoint
	mux.Handle("/query", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –í—Å—Ç–∞–≤–ª—è–µ–º –∫—É–∫–∏-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
		ctx := httpWithCookies.WithHTTPContext(r.Context(), w, r)
		r = r.WithContext(ctx)
		middleware.HTTPAuthMiddleware(srv).ServeHTTP(w, r)
	}))

	// 7) CORS
	corsHandler := cors.New(cors.Options{
		AllowedOrigins:   []string{"http://localhost:3000"},
		AllowedMethods:   []string{"GET", "POST", "OPTIONS"},
		AllowedHeaders:   []string{"Authorization", "Content-Type"},
		AllowCredentials: true,
	}).Handler(mux)

	// 8) –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	log.Println("üöÄ GraphQL-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080 (HTTP –∏ WS –Ω–∞ /query)")
	if err := http.ListenAndServe(":8080", corsHandler); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ GraphQL-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
