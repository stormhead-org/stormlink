package modules

import (
	"context"
	"fmt"
	"log"
	"os"

	"entgo.io/ent/dialect/sql/schema"
	_ "github.com/lib/pq"
	"stormlink/server/ent"
)

func ConnectDB() *ent.Client {
	dsn := fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		os.Getenv("DB_HOST"), os.Getenv("DB_PORT"),
		os.Getenv("DB_USER"), os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"), os.Getenv("SSL_MODE"),
	)
	client, err := ent.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ: %v", err)
	}
	return client
}

func MigrateDB(client *ent.Client, reset bool, seed bool) {
	if reset {
		log.Println("‚ö†Ô∏è  –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤...")
		if err := client.Schema.Create(
			context.Background(),
			schema.WithDropIndex(true),
			schema.WithDropColumn(true),
		); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –°–±—Ä–æ—Å –±–∞–∑—ã –∑–∞–≤–µ—Ä—à—ë–Ω.")
	}
	if seed {
		log.Println("‚ÑπÔ∏è  –û–±—ã—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã...")
		if err := client.Schema.Create(context.Background()); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
		log.Println("üå± –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–¥–∏–Ω–≥...")
		if err := Seed(client); err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–∏–¥–∏–Ω–≥–∞: %v", err)
		}
		log.Println("‚úÖ –°–∏–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
	} else {
		log.Println("‚ÑπÔ∏è  –û–±—ã—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã...")
		if err := client.Schema.Create(context.Background()); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
	}
}
