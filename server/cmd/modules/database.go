package modules

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	"stormlink/server/ent"

	"entgo.io/ent/dialect"
	entsql "entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	_ "github.com/lib/pq"
)

func ConnectDB() *ent.Client {
	dsn := fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		os.Getenv("DB_HOST"), os.Getenv("DB_PORT"),
		os.Getenv("DB_USER"), os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"), os.Getenv("SSL_MODE"),
	)

	// –°–æ–∑–¥–∞–µ–º database/sql DB –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "too many clients"
	maxOpenConns := getEnvInt("DB_MAX_OPEN_CONNS", 15)  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	maxIdleConns := getEnvInt("DB_MAX_IDLE_CONNS", 5)   // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	connMaxLifetime := getEnvInt("DB_CONN_MAX_LIFETIME_MINUTES", 5) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç

	db.SetMaxOpenConns(maxOpenConns)
	db.SetMaxIdleConns(maxIdleConns)
	db.SetConnMaxLifetime(time.Duration(connMaxLifetime) * time.Minute)

	log.Printf("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ –ë–î: MaxOpen=%d, MaxIdle=%d, MaxLifetime=%d–º", 
		maxOpenConns, maxIdleConns, connMaxLifetime)

	// –°–æ–∑–¥–∞–µ–º ent.Client —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º sql.DB
	drv := entsql.OpenDB(dialect.Postgres, db)
	client := ent.NewClient(ent.Driver(drv))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	if err := db.Ping(); err != nil {
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ: %v", err)
	}

	return client
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è int –∏–∑ ENV —Å –¥–µ—Ñ–æ–ª—Ç–æ–º
func getEnvInt(key string, defaultValue int) int {
	if value := os.Getenv(key); value != "" {
		if parsed, err := strconv.Atoi(value); err == nil {
			return parsed
		}
	}
	return defaultValue
}

func MigrateDB(client *ent.Client, reset bool, seed bool) {
	if reset {
		log.Println("‚ö†Ô∏è  –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤...")
		if err := client.Schema.Create(
			context.Background(),
			schema.WithDropIndex(true),
			schema.WithDropColumn(true),
		); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –°–±—Ä–æ—Å –±–∞–∑—ã –∑–∞–≤–µ—Ä—à—ë–Ω.")
	}
	if seed {
		log.Println("‚ÑπÔ∏è  –û–±—ã—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã...")
		if err := client.Schema.Create(context.Background()); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
		log.Println("üå± –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–¥–∏–Ω–≥...")
		if err := Seed(client); err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–∏–¥–∏–Ω–≥–∞: %v", err)
		}
		log.Println("‚úÖ –°–∏–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
	} else {
		log.Println("‚ÑπÔ∏è  –û–±—ã—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã...")
		if err := client.Schema.Create(context.Background()); err != nil {
			log.Fatalf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: %v", err)
		}
		log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
	}
}
